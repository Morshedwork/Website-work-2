"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@ai-sdk";
exports.ids = ["vendor-chunks/@ai-sdk"];
exports.modules = {

/***/ "(ssr)/./node_modules/@ai-sdk/openai/dist/index.mjs":
/*!****************************************************!*\
  !*** ./node_modules/@ai-sdk/openai/dist/index.mjs ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createOpenAI: () => (/* binding */ createOpenAI),\n/* harmony export */   openai: () => (/* binding */ openai)\n/* harmony export */ });\n/* harmony import */ var _ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ai-sdk/provider-utils */ \"(ssr)/./node_modules/@ai-sdk/provider-utils/dist/index.mjs\");\n/* harmony import */ var _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ai-sdk/provider */ \"(ssr)/./node_modules/@ai-sdk/provider/dist/index.mjs\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! zod */ \"(ssr)/./node_modules/zod/lib/index.mjs\");\n// src/openai-provider.ts\n\n// src/openai-chat-language-model.ts\n\n\n\n// src/convert-to-openai-chat-messages.ts\n\n\nfunction convertToOpenAIChatMessages({ prompt, useLegacyFunctionCalling = false, systemMessageMode = \"system\" }) {\n    const messages = [];\n    const warnings = [];\n    for (const { role, content } of prompt){\n        switch(role){\n            case \"system\":\n                {\n                    switch(systemMessageMode){\n                        case \"system\":\n                            {\n                                messages.push({\n                                    role: \"system\",\n                                    content\n                                });\n                                break;\n                            }\n                        case \"developer\":\n                            {\n                                messages.push({\n                                    role: \"developer\",\n                                    content\n                                });\n                                break;\n                            }\n                        case \"remove\":\n                            {\n                                warnings.push({\n                                    type: \"other\",\n                                    message: \"system messages are removed for this model\"\n                                });\n                                break;\n                            }\n                        default:\n                            {\n                                const _exhaustiveCheck = systemMessageMode;\n                                throw new Error(`Unsupported system message mode: ${_exhaustiveCheck}`);\n                            }\n                    }\n                    break;\n                }\n            case \"user\":\n                {\n                    if (content.length === 1 && content[0].type === \"text\") {\n                        messages.push({\n                            role: \"user\",\n                            content: content[0].text\n                        });\n                        break;\n                    }\n                    messages.push({\n                        role: \"user\",\n                        content: content.map((part, index)=>{\n                            var _a, _b, _c, _d;\n                            switch(part.type){\n                                case \"text\":\n                                    {\n                                        return {\n                                            type: \"text\",\n                                            text: part.text\n                                        };\n                                    }\n                                case \"image\":\n                                    {\n                                        return {\n                                            type: \"image_url\",\n                                            image_url: {\n                                                url: part.image instanceof URL ? part.image.toString() : `data:${(_a = part.mimeType) != null ? _a : \"image/jpeg\"};base64,${(0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_0__.convertUint8ArrayToBase64)(part.image)}`,\n                                                // OpenAI specific extension: image detail\n                                                detail: (_c = (_b = part.providerMetadata) == null ? void 0 : _b.openai) == null ? void 0 : _c.imageDetail\n                                            }\n                                        };\n                                    }\n                                case \"file\":\n                                    {\n                                        if (part.data instanceof URL) {\n                                            throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.UnsupportedFunctionalityError({\n                                                functionality: \"'File content parts with URL data' functionality not supported.\"\n                                            });\n                                        }\n                                        switch(part.mimeType){\n                                            case \"audio/wav\":\n                                                {\n                                                    return {\n                                                        type: \"input_audio\",\n                                                        input_audio: {\n                                                            data: part.data,\n                                                            format: \"wav\"\n                                                        }\n                                                    };\n                                                }\n                                            case \"audio/mp3\":\n                                            case \"audio/mpeg\":\n                                                {\n                                                    return {\n                                                        type: \"input_audio\",\n                                                        input_audio: {\n                                                            data: part.data,\n                                                            format: \"mp3\"\n                                                        }\n                                                    };\n                                                }\n                                            case \"application/pdf\":\n                                                {\n                                                    return {\n                                                        type: \"file\",\n                                                        file: {\n                                                            filename: (_d = part.filename) != null ? _d : `part-${index}.pdf`,\n                                                            file_data: `data:application/pdf;base64,${part.data}`\n                                                        }\n                                                    };\n                                                }\n                                            default:\n                                                {\n                                                    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.UnsupportedFunctionalityError({\n                                                        functionality: `File content part type ${part.mimeType} in user messages`\n                                                    });\n                                                }\n                                        }\n                                    }\n                            }\n                        })\n                    });\n                    break;\n                }\n            case \"assistant\":\n                {\n                    let text = \"\";\n                    const toolCalls = [];\n                    for (const part of content){\n                        switch(part.type){\n                            case \"text\":\n                                {\n                                    text += part.text;\n                                    break;\n                                }\n                            case \"tool-call\":\n                                {\n                                    toolCalls.push({\n                                        id: part.toolCallId,\n                                        type: \"function\",\n                                        function: {\n                                            name: part.toolName,\n                                            arguments: JSON.stringify(part.args)\n                                        }\n                                    });\n                                    break;\n                                }\n                        }\n                    }\n                    if (useLegacyFunctionCalling) {\n                        if (toolCalls.length > 1) {\n                            throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.UnsupportedFunctionalityError({\n                                functionality: \"useLegacyFunctionCalling with multiple tool calls in one message\"\n                            });\n                        }\n                        messages.push({\n                            role: \"assistant\",\n                            content: text,\n                            function_call: toolCalls.length > 0 ? toolCalls[0].function : void 0\n                        });\n                    } else {\n                        messages.push({\n                            role: \"assistant\",\n                            content: text,\n                            tool_calls: toolCalls.length > 0 ? toolCalls : void 0\n                        });\n                    }\n                    break;\n                }\n            case \"tool\":\n                {\n                    for (const toolResponse of content){\n                        if (useLegacyFunctionCalling) {\n                            messages.push({\n                                role: \"function\",\n                                name: toolResponse.toolName,\n                                content: JSON.stringify(toolResponse.result)\n                            });\n                        } else {\n                            messages.push({\n                                role: \"tool\",\n                                tool_call_id: toolResponse.toolCallId,\n                                content: JSON.stringify(toolResponse.result)\n                            });\n                        }\n                    }\n                    break;\n                }\n            default:\n                {\n                    const _exhaustiveCheck = role;\n                    throw new Error(`Unsupported role: ${_exhaustiveCheck}`);\n                }\n        }\n    }\n    return {\n        messages,\n        warnings\n    };\n}\n// src/map-openai-chat-logprobs.ts\nfunction mapOpenAIChatLogProbsOutput(logprobs) {\n    var _a, _b;\n    return (_b = (_a = logprobs == null ? void 0 : logprobs.content) == null ? void 0 : _a.map(({ token, logprob, top_logprobs })=>({\n            token,\n            logprob,\n            topLogprobs: top_logprobs ? top_logprobs.map(({ token: token2, logprob: logprob2 })=>({\n                    token: token2,\n                    logprob: logprob2\n                })) : []\n        }))) != null ? _b : void 0;\n}\n// src/map-openai-finish-reason.ts\nfunction mapOpenAIFinishReason(finishReason) {\n    switch(finishReason){\n        case \"stop\":\n            return \"stop\";\n        case \"length\":\n            return \"length\";\n        case \"content_filter\":\n            return \"content-filter\";\n        case \"function_call\":\n        case \"tool_calls\":\n            return \"tool-calls\";\n        default:\n            return \"unknown\";\n    }\n}\n// src/openai-error.ts\n\n\nvar openaiErrorDataSchema = zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n    error: zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n        message: zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n        // The additional information below is handled loosely to support\n        // OpenAI-compatible providers that have slightly different error\n        // responses:\n        type: zod__WEBPACK_IMPORTED_MODULE_2__.z.string().nullish(),\n        param: zod__WEBPACK_IMPORTED_MODULE_2__.z.any().nullish(),\n        code: zod__WEBPACK_IMPORTED_MODULE_2__.z.union([\n            zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n            zod__WEBPACK_IMPORTED_MODULE_2__.z.number()\n        ]).nullish()\n    })\n});\nvar openaiFailedResponseHandler = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_0__.createJsonErrorResponseHandler)({\n    errorSchema: openaiErrorDataSchema,\n    errorToMessage: (data)=>data.error.message\n});\n// src/get-response-metadata.ts\nfunction getResponseMetadata({ id, model, created }) {\n    return {\n        id: id != null ? id : void 0,\n        modelId: model != null ? model : void 0,\n        timestamp: created != null ? new Date(created * 1e3) : void 0\n    };\n}\n// src/openai-prepare-tools.ts\n\nfunction prepareTools({ mode, useLegacyFunctionCalling = false, structuredOutputs }) {\n    var _a;\n    const tools = ((_a = mode.tools) == null ? void 0 : _a.length) ? mode.tools : void 0;\n    const toolWarnings = [];\n    if (tools == null) {\n        return {\n            tools: void 0,\n            tool_choice: void 0,\n            toolWarnings\n        };\n    }\n    const toolChoice = mode.toolChoice;\n    if (useLegacyFunctionCalling) {\n        const openaiFunctions = [];\n        for (const tool of tools){\n            if (tool.type === \"provider-defined\") {\n                toolWarnings.push({\n                    type: \"unsupported-tool\",\n                    tool\n                });\n            } else {\n                openaiFunctions.push({\n                    name: tool.name,\n                    description: tool.description,\n                    parameters: tool.parameters\n                });\n            }\n        }\n        if (toolChoice == null) {\n            return {\n                functions: openaiFunctions,\n                function_call: void 0,\n                toolWarnings\n            };\n        }\n        const type2 = toolChoice.type;\n        switch(type2){\n            case \"auto\":\n            case \"none\":\n            case void 0:\n                return {\n                    functions: openaiFunctions,\n                    function_call: void 0,\n                    toolWarnings\n                };\n            case \"required\":\n                throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.UnsupportedFunctionalityError({\n                    functionality: \"useLegacyFunctionCalling and toolChoice: required\"\n                });\n            default:\n                return {\n                    functions: openaiFunctions,\n                    function_call: {\n                        name: toolChoice.toolName\n                    },\n                    toolWarnings\n                };\n        }\n    }\n    const openaiTools2 = [];\n    for (const tool of tools){\n        if (tool.type === \"provider-defined\") {\n            toolWarnings.push({\n                type: \"unsupported-tool\",\n                tool\n            });\n        } else {\n            openaiTools2.push({\n                type: \"function\",\n                function: {\n                    name: tool.name,\n                    description: tool.description,\n                    parameters: tool.parameters,\n                    strict: structuredOutputs ? true : void 0\n                }\n            });\n        }\n    }\n    if (toolChoice == null) {\n        return {\n            tools: openaiTools2,\n            tool_choice: void 0,\n            toolWarnings\n        };\n    }\n    const type = toolChoice.type;\n    switch(type){\n        case \"auto\":\n        case \"none\":\n        case \"required\":\n            return {\n                tools: openaiTools2,\n                tool_choice: type,\n                toolWarnings\n            };\n        case \"tool\":\n            return {\n                tools: openaiTools2,\n                tool_choice: {\n                    type: \"function\",\n                    function: {\n                        name: toolChoice.toolName\n                    }\n                },\n                toolWarnings\n            };\n        default:\n            {\n                const _exhaustiveCheck = type;\n                throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.UnsupportedFunctionalityError({\n                    functionality: `Unsupported tool choice type: ${_exhaustiveCheck}`\n                });\n            }\n    }\n}\n// src/openai-chat-language-model.ts\nvar OpenAIChatLanguageModel = class {\n    constructor(modelId, settings, config){\n        this.specificationVersion = \"v1\";\n        this.modelId = modelId;\n        this.settings = settings;\n        this.config = config;\n    }\n    get supportsStructuredOutputs() {\n        var _a;\n        return (_a = this.settings.structuredOutputs) != null ? _a : isReasoningModel(this.modelId);\n    }\n    get defaultObjectGenerationMode() {\n        if (isAudioModel(this.modelId)) {\n            return \"tool\";\n        }\n        return this.supportsStructuredOutputs ? \"json\" : \"tool\";\n    }\n    get provider() {\n        return this.config.provider;\n    }\n    get supportsImageUrls() {\n        return !this.settings.downloadImages;\n    }\n    getArgs({ mode, prompt, maxTokens, temperature, topP, topK, frequencyPenalty, presencePenalty, stopSequences, responseFormat, seed, providerMetadata }) {\n        var _a, _b, _c, _d, _e, _f, _g, _h;\n        const type = mode.type;\n        const warnings = [];\n        if (topK != null) {\n            warnings.push({\n                type: \"unsupported-setting\",\n                setting: \"topK\"\n            });\n        }\n        if ((responseFormat == null ? void 0 : responseFormat.type) === \"json\" && responseFormat.schema != null && !this.supportsStructuredOutputs) {\n            warnings.push({\n                type: \"unsupported-setting\",\n                setting: \"responseFormat\",\n                details: \"JSON response format schema is only supported with structuredOutputs\"\n            });\n        }\n        const useLegacyFunctionCalling = this.settings.useLegacyFunctionCalling;\n        if (useLegacyFunctionCalling && this.settings.parallelToolCalls === true) {\n            throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.UnsupportedFunctionalityError({\n                functionality: \"useLegacyFunctionCalling with parallelToolCalls\"\n            });\n        }\n        if (useLegacyFunctionCalling && this.supportsStructuredOutputs) {\n            throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.UnsupportedFunctionalityError({\n                functionality: \"structuredOutputs with useLegacyFunctionCalling\"\n            });\n        }\n        const { messages, warnings: messageWarnings } = convertToOpenAIChatMessages({\n            prompt,\n            useLegacyFunctionCalling,\n            systemMessageMode: getSystemMessageMode(this.modelId)\n        });\n        warnings.push(...messageWarnings);\n        const baseArgs = {\n            // model id:\n            model: this.modelId,\n            // model specific settings:\n            logit_bias: this.settings.logitBias,\n            logprobs: this.settings.logprobs === true || typeof this.settings.logprobs === \"number\" ? true : void 0,\n            top_logprobs: typeof this.settings.logprobs === \"number\" ? this.settings.logprobs : typeof this.settings.logprobs === \"boolean\" ? this.settings.logprobs ? 0 : void 0 : void 0,\n            user: this.settings.user,\n            parallel_tool_calls: this.settings.parallelToolCalls,\n            // standardized settings:\n            max_tokens: maxTokens,\n            temperature,\n            top_p: topP,\n            frequency_penalty: frequencyPenalty,\n            presence_penalty: presencePenalty,\n            response_format: (responseFormat == null ? void 0 : responseFormat.type) === \"json\" ? this.supportsStructuredOutputs && responseFormat.schema != null ? {\n                type: \"json_schema\",\n                json_schema: {\n                    schema: responseFormat.schema,\n                    strict: true,\n                    name: (_a = responseFormat.name) != null ? _a : \"response\",\n                    description: responseFormat.description\n                }\n            } : {\n                type: \"json_object\"\n            } : void 0,\n            stop: stopSequences,\n            seed,\n            // openai specific settings:\n            // TODO remove in next major version; we auto-map maxTokens now\n            max_completion_tokens: (_b = providerMetadata == null ? void 0 : providerMetadata.openai) == null ? void 0 : _b.maxCompletionTokens,\n            store: (_c = providerMetadata == null ? void 0 : providerMetadata.openai) == null ? void 0 : _c.store,\n            metadata: (_d = providerMetadata == null ? void 0 : providerMetadata.openai) == null ? void 0 : _d.metadata,\n            prediction: (_e = providerMetadata == null ? void 0 : providerMetadata.openai) == null ? void 0 : _e.prediction,\n            reasoning_effort: (_g = (_f = providerMetadata == null ? void 0 : providerMetadata.openai) == null ? void 0 : _f.reasoningEffort) != null ? _g : this.settings.reasoningEffort,\n            // messages:\n            messages\n        };\n        if (isReasoningModel(this.modelId)) {\n            if (baseArgs.temperature != null) {\n                baseArgs.temperature = void 0;\n                warnings.push({\n                    type: \"unsupported-setting\",\n                    setting: \"temperature\",\n                    details: \"temperature is not supported for reasoning models\"\n                });\n            }\n            if (baseArgs.top_p != null) {\n                baseArgs.top_p = void 0;\n                warnings.push({\n                    type: \"unsupported-setting\",\n                    setting: \"topP\",\n                    details: \"topP is not supported for reasoning models\"\n                });\n            }\n            if (baseArgs.frequency_penalty != null) {\n                baseArgs.frequency_penalty = void 0;\n                warnings.push({\n                    type: \"unsupported-setting\",\n                    setting: \"frequencyPenalty\",\n                    details: \"frequencyPenalty is not supported for reasoning models\"\n                });\n            }\n            if (baseArgs.presence_penalty != null) {\n                baseArgs.presence_penalty = void 0;\n                warnings.push({\n                    type: \"unsupported-setting\",\n                    setting: \"presencePenalty\",\n                    details: \"presencePenalty is not supported for reasoning models\"\n                });\n            }\n            if (baseArgs.logit_bias != null) {\n                baseArgs.logit_bias = void 0;\n                warnings.push({\n                    type: \"other\",\n                    message: \"logitBias is not supported for reasoning models\"\n                });\n            }\n            if (baseArgs.logprobs != null) {\n                baseArgs.logprobs = void 0;\n                warnings.push({\n                    type: \"other\",\n                    message: \"logprobs is not supported for reasoning models\"\n                });\n            }\n            if (baseArgs.top_logprobs != null) {\n                baseArgs.top_logprobs = void 0;\n                warnings.push({\n                    type: \"other\",\n                    message: \"topLogprobs is not supported for reasoning models\"\n                });\n            }\n            if (baseArgs.max_tokens != null) {\n                if (baseArgs.max_completion_tokens == null) {\n                    baseArgs.max_completion_tokens = baseArgs.max_tokens;\n                }\n                baseArgs.max_tokens = void 0;\n            }\n        }\n        switch(type){\n            case \"regular\":\n                {\n                    const { tools, tool_choice, functions, function_call, toolWarnings } = prepareTools({\n                        mode,\n                        useLegacyFunctionCalling,\n                        structuredOutputs: this.supportsStructuredOutputs\n                    });\n                    return {\n                        args: {\n                            ...baseArgs,\n                            tools,\n                            tool_choice,\n                            functions,\n                            function_call\n                        },\n                        warnings: [\n                            ...warnings,\n                            ...toolWarnings\n                        ]\n                    };\n                }\n            case \"object-json\":\n                {\n                    return {\n                        args: {\n                            ...baseArgs,\n                            response_format: this.supportsStructuredOutputs && mode.schema != null ? {\n                                type: \"json_schema\",\n                                json_schema: {\n                                    schema: mode.schema,\n                                    strict: true,\n                                    name: (_h = mode.name) != null ? _h : \"response\",\n                                    description: mode.description\n                                }\n                            } : {\n                                type: \"json_object\"\n                            }\n                        },\n                        warnings\n                    };\n                }\n            case \"object-tool\":\n                {\n                    return {\n                        args: useLegacyFunctionCalling ? {\n                            ...baseArgs,\n                            function_call: {\n                                name: mode.tool.name\n                            },\n                            functions: [\n                                {\n                                    name: mode.tool.name,\n                                    description: mode.tool.description,\n                                    parameters: mode.tool.parameters\n                                }\n                            ]\n                        } : {\n                            ...baseArgs,\n                            tool_choice: {\n                                type: \"function\",\n                                function: {\n                                    name: mode.tool.name\n                                }\n                            },\n                            tools: [\n                                {\n                                    type: \"function\",\n                                    function: {\n                                        name: mode.tool.name,\n                                        description: mode.tool.description,\n                                        parameters: mode.tool.parameters,\n                                        strict: this.supportsStructuredOutputs ? true : void 0\n                                    }\n                                }\n                            ]\n                        },\n                        warnings\n                    };\n                }\n            default:\n                {\n                    const _exhaustiveCheck = type;\n                    throw new Error(`Unsupported type: ${_exhaustiveCheck}`);\n                }\n        }\n    }\n    async doGenerate(options) {\n        var _a, _b, _c, _d, _e, _f, _g, _h;\n        const { args: body, warnings } = this.getArgs(options);\n        const { responseHeaders, value: response, rawValue: rawResponse } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_0__.postJsonToApi)({\n            url: this.config.url({\n                path: \"/chat/completions\",\n                modelId: this.modelId\n            }),\n            headers: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_0__.combineHeaders)(this.config.headers(), options.headers),\n            body,\n            failedResponseHandler: openaiFailedResponseHandler,\n            successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_0__.createJsonResponseHandler)(openaiChatResponseSchema),\n            abortSignal: options.abortSignal,\n            fetch: this.config.fetch\n        });\n        const { messages: rawPrompt, ...rawSettings } = body;\n        const choice = response.choices[0];\n        const completionTokenDetails = (_a = response.usage) == null ? void 0 : _a.completion_tokens_details;\n        const promptTokenDetails = (_b = response.usage) == null ? void 0 : _b.prompt_tokens_details;\n        const providerMetadata = {\n            openai: {}\n        };\n        if ((completionTokenDetails == null ? void 0 : completionTokenDetails.reasoning_tokens) != null) {\n            providerMetadata.openai.reasoningTokens = completionTokenDetails == null ? void 0 : completionTokenDetails.reasoning_tokens;\n        }\n        if ((completionTokenDetails == null ? void 0 : completionTokenDetails.accepted_prediction_tokens) != null) {\n            providerMetadata.openai.acceptedPredictionTokens = completionTokenDetails == null ? void 0 : completionTokenDetails.accepted_prediction_tokens;\n        }\n        if ((completionTokenDetails == null ? void 0 : completionTokenDetails.rejected_prediction_tokens) != null) {\n            providerMetadata.openai.rejectedPredictionTokens = completionTokenDetails == null ? void 0 : completionTokenDetails.rejected_prediction_tokens;\n        }\n        if ((promptTokenDetails == null ? void 0 : promptTokenDetails.cached_tokens) != null) {\n            providerMetadata.openai.cachedPromptTokens = promptTokenDetails == null ? void 0 : promptTokenDetails.cached_tokens;\n        }\n        return {\n            text: (_c = choice.message.content) != null ? _c : void 0,\n            toolCalls: this.settings.useLegacyFunctionCalling && choice.message.function_call ? [\n                {\n                    toolCallType: \"function\",\n                    toolCallId: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_0__.generateId)(),\n                    toolName: choice.message.function_call.name,\n                    args: choice.message.function_call.arguments\n                }\n            ] : (_d = choice.message.tool_calls) == null ? void 0 : _d.map((toolCall)=>{\n                var _a2;\n                return {\n                    toolCallType: \"function\",\n                    toolCallId: (_a2 = toolCall.id) != null ? _a2 : (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_0__.generateId)(),\n                    toolName: toolCall.function.name,\n                    args: toolCall.function.arguments\n                };\n            }),\n            finishReason: mapOpenAIFinishReason(choice.finish_reason),\n            usage: {\n                promptTokens: (_f = (_e = response.usage) == null ? void 0 : _e.prompt_tokens) != null ? _f : NaN,\n                completionTokens: (_h = (_g = response.usage) == null ? void 0 : _g.completion_tokens) != null ? _h : NaN\n            },\n            rawCall: {\n                rawPrompt,\n                rawSettings\n            },\n            rawResponse: {\n                headers: responseHeaders,\n                body: rawResponse\n            },\n            request: {\n                body: JSON.stringify(body)\n            },\n            response: getResponseMetadata(response),\n            warnings,\n            logprobs: mapOpenAIChatLogProbsOutput(choice.logprobs),\n            providerMetadata\n        };\n    }\n    async doStream(options) {\n        if (this.settings.simulateStreaming) {\n            const result = await this.doGenerate(options);\n            const simulatedStream = new ReadableStream({\n                start (controller) {\n                    controller.enqueue({\n                        type: \"response-metadata\",\n                        ...result.response\n                    });\n                    if (result.text) {\n                        controller.enqueue({\n                            type: \"text-delta\",\n                            textDelta: result.text\n                        });\n                    }\n                    if (result.toolCalls) {\n                        for (const toolCall of result.toolCalls){\n                            controller.enqueue({\n                                type: \"tool-call-delta\",\n                                toolCallType: \"function\",\n                                toolCallId: toolCall.toolCallId,\n                                toolName: toolCall.toolName,\n                                argsTextDelta: toolCall.args\n                            });\n                            controller.enqueue({\n                                type: \"tool-call\",\n                                ...toolCall\n                            });\n                        }\n                    }\n                    controller.enqueue({\n                        type: \"finish\",\n                        finishReason: result.finishReason,\n                        usage: result.usage,\n                        logprobs: result.logprobs,\n                        providerMetadata: result.providerMetadata\n                    });\n                    controller.close();\n                }\n            });\n            return {\n                stream: simulatedStream,\n                rawCall: result.rawCall,\n                rawResponse: result.rawResponse,\n                warnings: result.warnings\n            };\n        }\n        const { args, warnings } = this.getArgs(options);\n        const body = {\n            ...args,\n            stream: true,\n            // only include stream_options when in strict compatibility mode:\n            stream_options: this.config.compatibility === \"strict\" ? {\n                include_usage: true\n            } : void 0\n        };\n        const { responseHeaders, value: response } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_0__.postJsonToApi)({\n            url: this.config.url({\n                path: \"/chat/completions\",\n                modelId: this.modelId\n            }),\n            headers: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_0__.combineHeaders)(this.config.headers(), options.headers),\n            body,\n            failedResponseHandler: openaiFailedResponseHandler,\n            successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_0__.createEventSourceResponseHandler)(openaiChatChunkSchema),\n            abortSignal: options.abortSignal,\n            fetch: this.config.fetch\n        });\n        const { messages: rawPrompt, ...rawSettings } = args;\n        const toolCalls = [];\n        let finishReason = \"unknown\";\n        let usage = {\n            promptTokens: void 0,\n            completionTokens: void 0\n        };\n        let logprobs;\n        let isFirstChunk = true;\n        const { useLegacyFunctionCalling } = this.settings;\n        const providerMetadata = {\n            openai: {}\n        };\n        return {\n            stream: response.pipeThrough(new TransformStream({\n                transform (chunk, controller) {\n                    var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l;\n                    if (!chunk.success) {\n                        finishReason = \"error\";\n                        controller.enqueue({\n                            type: \"error\",\n                            error: chunk.error\n                        });\n                        return;\n                    }\n                    const value = chunk.value;\n                    if (\"error\" in value) {\n                        finishReason = \"error\";\n                        controller.enqueue({\n                            type: \"error\",\n                            error: value.error\n                        });\n                        return;\n                    }\n                    if (isFirstChunk) {\n                        isFirstChunk = false;\n                        controller.enqueue({\n                            type: \"response-metadata\",\n                            ...getResponseMetadata(value)\n                        });\n                    }\n                    if (value.usage != null) {\n                        const { prompt_tokens, completion_tokens, prompt_tokens_details, completion_tokens_details } = value.usage;\n                        usage = {\n                            promptTokens: prompt_tokens != null ? prompt_tokens : void 0,\n                            completionTokens: completion_tokens != null ? completion_tokens : void 0\n                        };\n                        if ((completion_tokens_details == null ? void 0 : completion_tokens_details.reasoning_tokens) != null) {\n                            providerMetadata.openai.reasoningTokens = completion_tokens_details == null ? void 0 : completion_tokens_details.reasoning_tokens;\n                        }\n                        if ((completion_tokens_details == null ? void 0 : completion_tokens_details.accepted_prediction_tokens) != null) {\n                            providerMetadata.openai.acceptedPredictionTokens = completion_tokens_details == null ? void 0 : completion_tokens_details.accepted_prediction_tokens;\n                        }\n                        if ((completion_tokens_details == null ? void 0 : completion_tokens_details.rejected_prediction_tokens) != null) {\n                            providerMetadata.openai.rejectedPredictionTokens = completion_tokens_details == null ? void 0 : completion_tokens_details.rejected_prediction_tokens;\n                        }\n                        if ((prompt_tokens_details == null ? void 0 : prompt_tokens_details.cached_tokens) != null) {\n                            providerMetadata.openai.cachedPromptTokens = prompt_tokens_details == null ? void 0 : prompt_tokens_details.cached_tokens;\n                        }\n                    }\n                    const choice = value.choices[0];\n                    if ((choice == null ? void 0 : choice.finish_reason) != null) {\n                        finishReason = mapOpenAIFinishReason(choice.finish_reason);\n                    }\n                    if ((choice == null ? void 0 : choice.delta) == null) {\n                        return;\n                    }\n                    const delta = choice.delta;\n                    if (delta.content != null) {\n                        controller.enqueue({\n                            type: \"text-delta\",\n                            textDelta: delta.content\n                        });\n                    }\n                    const mappedLogprobs = mapOpenAIChatLogProbsOutput(choice == null ? void 0 : choice.logprobs);\n                    if (mappedLogprobs == null ? void 0 : mappedLogprobs.length) {\n                        if (logprobs === void 0) logprobs = [];\n                        logprobs.push(...mappedLogprobs);\n                    }\n                    const mappedToolCalls = useLegacyFunctionCalling && delta.function_call != null ? [\n                        {\n                            type: \"function\",\n                            id: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_0__.generateId)(),\n                            function: delta.function_call,\n                            index: 0\n                        }\n                    ] : delta.tool_calls;\n                    if (mappedToolCalls != null) {\n                        for (const toolCallDelta of mappedToolCalls){\n                            const index = toolCallDelta.index;\n                            if (toolCalls[index] == null) {\n                                if (toolCallDelta.type !== \"function\") {\n                                    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.InvalidResponseDataError({\n                                        data: toolCallDelta,\n                                        message: `Expected 'function' type.`\n                                    });\n                                }\n                                if (toolCallDelta.id == null) {\n                                    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.InvalidResponseDataError({\n                                        data: toolCallDelta,\n                                        message: `Expected 'id' to be a string.`\n                                    });\n                                }\n                                if (((_a = toolCallDelta.function) == null ? void 0 : _a.name) == null) {\n                                    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.InvalidResponseDataError({\n                                        data: toolCallDelta,\n                                        message: `Expected 'function.name' to be a string.`\n                                    });\n                                }\n                                toolCalls[index] = {\n                                    id: toolCallDelta.id,\n                                    type: \"function\",\n                                    function: {\n                                        name: toolCallDelta.function.name,\n                                        arguments: (_b = toolCallDelta.function.arguments) != null ? _b : \"\"\n                                    },\n                                    hasFinished: false\n                                };\n                                const toolCall2 = toolCalls[index];\n                                if (((_c = toolCall2.function) == null ? void 0 : _c.name) != null && ((_d = toolCall2.function) == null ? void 0 : _d.arguments) != null) {\n                                    if (toolCall2.function.arguments.length > 0) {\n                                        controller.enqueue({\n                                            type: \"tool-call-delta\",\n                                            toolCallType: \"function\",\n                                            toolCallId: toolCall2.id,\n                                            toolName: toolCall2.function.name,\n                                            argsTextDelta: toolCall2.function.arguments\n                                        });\n                                    }\n                                    if ((0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_0__.isParsableJson)(toolCall2.function.arguments)) {\n                                        controller.enqueue({\n                                            type: \"tool-call\",\n                                            toolCallType: \"function\",\n                                            toolCallId: (_e = toolCall2.id) != null ? _e : (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_0__.generateId)(),\n                                            toolName: toolCall2.function.name,\n                                            args: toolCall2.function.arguments\n                                        });\n                                        toolCall2.hasFinished = true;\n                                    }\n                                }\n                                continue;\n                            }\n                            const toolCall = toolCalls[index];\n                            if (toolCall.hasFinished) {\n                                continue;\n                            }\n                            if (((_f = toolCallDelta.function) == null ? void 0 : _f.arguments) != null) {\n                                toolCall.function.arguments += (_h = (_g = toolCallDelta.function) == null ? void 0 : _g.arguments) != null ? _h : \"\";\n                            }\n                            controller.enqueue({\n                                type: \"tool-call-delta\",\n                                toolCallType: \"function\",\n                                toolCallId: toolCall.id,\n                                toolName: toolCall.function.name,\n                                argsTextDelta: (_i = toolCallDelta.function.arguments) != null ? _i : \"\"\n                            });\n                            if (((_j = toolCall.function) == null ? void 0 : _j.name) != null && ((_k = toolCall.function) == null ? void 0 : _k.arguments) != null && (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_0__.isParsableJson)(toolCall.function.arguments)) {\n                                controller.enqueue({\n                                    type: \"tool-call\",\n                                    toolCallType: \"function\",\n                                    toolCallId: (_l = toolCall.id) != null ? _l : (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_0__.generateId)(),\n                                    toolName: toolCall.function.name,\n                                    args: toolCall.function.arguments\n                                });\n                                toolCall.hasFinished = true;\n                            }\n                        }\n                    }\n                },\n                flush (controller) {\n                    var _a, _b;\n                    controller.enqueue({\n                        type: \"finish\",\n                        finishReason,\n                        logprobs,\n                        usage: {\n                            promptTokens: (_a = usage.promptTokens) != null ? _a : NaN,\n                            completionTokens: (_b = usage.completionTokens) != null ? _b : NaN\n                        },\n                        ...providerMetadata != null ? {\n                            providerMetadata\n                        } : {}\n                    });\n                }\n            })),\n            rawCall: {\n                rawPrompt,\n                rawSettings\n            },\n            rawResponse: {\n                headers: responseHeaders\n            },\n            request: {\n                body: JSON.stringify(body)\n            },\n            warnings\n        };\n    }\n};\nvar openaiTokenUsageSchema = zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n    prompt_tokens: zod__WEBPACK_IMPORTED_MODULE_2__.z.number().nullish(),\n    completion_tokens: zod__WEBPACK_IMPORTED_MODULE_2__.z.number().nullish(),\n    prompt_tokens_details: zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n        cached_tokens: zod__WEBPACK_IMPORTED_MODULE_2__.z.number().nullish()\n    }).nullish(),\n    completion_tokens_details: zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n        reasoning_tokens: zod__WEBPACK_IMPORTED_MODULE_2__.z.number().nullish(),\n        accepted_prediction_tokens: zod__WEBPACK_IMPORTED_MODULE_2__.z.number().nullish(),\n        rejected_prediction_tokens: zod__WEBPACK_IMPORTED_MODULE_2__.z.number().nullish()\n    }).nullish()\n}).nullish();\nvar openaiChatResponseSchema = zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n    id: zod__WEBPACK_IMPORTED_MODULE_2__.z.string().nullish(),\n    created: zod__WEBPACK_IMPORTED_MODULE_2__.z.number().nullish(),\n    model: zod__WEBPACK_IMPORTED_MODULE_2__.z.string().nullish(),\n    choices: zod__WEBPACK_IMPORTED_MODULE_2__.z.array(zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n        message: zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n            role: zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(\"assistant\").nullish(),\n            content: zod__WEBPACK_IMPORTED_MODULE_2__.z.string().nullish(),\n            function_call: zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n                arguments: zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n                name: zod__WEBPACK_IMPORTED_MODULE_2__.z.string()\n            }).nullish(),\n            tool_calls: zod__WEBPACK_IMPORTED_MODULE_2__.z.array(zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n                id: zod__WEBPACK_IMPORTED_MODULE_2__.z.string().nullish(),\n                type: zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(\"function\"),\n                function: zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n                    name: zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n                    arguments: zod__WEBPACK_IMPORTED_MODULE_2__.z.string()\n                })\n            })).nullish()\n        }),\n        index: zod__WEBPACK_IMPORTED_MODULE_2__.z.number(),\n        logprobs: zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n            content: zod__WEBPACK_IMPORTED_MODULE_2__.z.array(zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n                token: zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n                logprob: zod__WEBPACK_IMPORTED_MODULE_2__.z.number(),\n                top_logprobs: zod__WEBPACK_IMPORTED_MODULE_2__.z.array(zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n                    token: zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n                    logprob: zod__WEBPACK_IMPORTED_MODULE_2__.z.number()\n                }))\n            })).nullable()\n        }).nullish(),\n        finish_reason: zod__WEBPACK_IMPORTED_MODULE_2__.z.string().nullish()\n    })),\n    usage: openaiTokenUsageSchema\n});\nvar openaiChatChunkSchema = zod__WEBPACK_IMPORTED_MODULE_2__.z.union([\n    zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n        id: zod__WEBPACK_IMPORTED_MODULE_2__.z.string().nullish(),\n        created: zod__WEBPACK_IMPORTED_MODULE_2__.z.number().nullish(),\n        model: zod__WEBPACK_IMPORTED_MODULE_2__.z.string().nullish(),\n        choices: zod__WEBPACK_IMPORTED_MODULE_2__.z.array(zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n            delta: zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n                role: zod__WEBPACK_IMPORTED_MODULE_2__.z.enum([\n                    \"assistant\"\n                ]).nullish(),\n                content: zod__WEBPACK_IMPORTED_MODULE_2__.z.string().nullish(),\n                function_call: zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n                    name: zod__WEBPACK_IMPORTED_MODULE_2__.z.string().optional(),\n                    arguments: zod__WEBPACK_IMPORTED_MODULE_2__.z.string().optional()\n                }).nullish(),\n                tool_calls: zod__WEBPACK_IMPORTED_MODULE_2__.z.array(zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n                    index: zod__WEBPACK_IMPORTED_MODULE_2__.z.number(),\n                    id: zod__WEBPACK_IMPORTED_MODULE_2__.z.string().nullish(),\n                    type: zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(\"function\").optional(),\n                    function: zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n                        name: zod__WEBPACK_IMPORTED_MODULE_2__.z.string().nullish(),\n                        arguments: zod__WEBPACK_IMPORTED_MODULE_2__.z.string().nullish()\n                    })\n                })).nullish()\n            }).nullish(),\n            logprobs: zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n                content: zod__WEBPACK_IMPORTED_MODULE_2__.z.array(zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n                    token: zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n                    logprob: zod__WEBPACK_IMPORTED_MODULE_2__.z.number(),\n                    top_logprobs: zod__WEBPACK_IMPORTED_MODULE_2__.z.array(zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n                        token: zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n                        logprob: zod__WEBPACK_IMPORTED_MODULE_2__.z.number()\n                    }))\n                })).nullable()\n            }).nullish(),\n            finish_reason: zod__WEBPACK_IMPORTED_MODULE_2__.z.string().nullable().optional(),\n            index: zod__WEBPACK_IMPORTED_MODULE_2__.z.number()\n        })),\n        usage: openaiTokenUsageSchema\n    }),\n    openaiErrorDataSchema\n]);\nfunction isReasoningModel(modelId) {\n    return modelId === \"o1\" || modelId.startsWith(\"o1-\") || modelId === \"o3\" || modelId.startsWith(\"o3-\");\n}\nfunction isAudioModel(modelId) {\n    return modelId.startsWith(\"gpt-4o-audio-preview\");\n}\nfunction getSystemMessageMode(modelId) {\n    var _a, _b;\n    if (!isReasoningModel(modelId)) {\n        return \"system\";\n    }\n    return (_b = (_a = reasoningModels[modelId]) == null ? void 0 : _a.systemMessageMode) != null ? _b : \"developer\";\n}\nvar reasoningModels = {\n    \"o1-mini\": {\n        systemMessageMode: \"remove\"\n    },\n    \"o1-mini-2024-09-12\": {\n        systemMessageMode: \"remove\"\n    },\n    \"o1-preview\": {\n        systemMessageMode: \"remove\"\n    },\n    \"o1-preview-2024-09-12\": {\n        systemMessageMode: \"remove\"\n    },\n    \"o3-mini\": {\n        systemMessageMode: \"developer\"\n    },\n    \"o3-mini-2025-01-31\": {\n        systemMessageMode: \"developer\"\n    }\n};\n// src/openai-completion-language-model.ts\n\n\n\n// src/convert-to-openai-completion-prompt.ts\n\nfunction convertToOpenAICompletionPrompt({ prompt, inputFormat, user = \"user\", assistant = \"assistant\" }) {\n    if (inputFormat === \"prompt\" && prompt.length === 1 && prompt[0].role === \"user\" && prompt[0].content.length === 1 && prompt[0].content[0].type === \"text\") {\n        return {\n            prompt: prompt[0].content[0].text\n        };\n    }\n    let text = \"\";\n    if (prompt[0].role === \"system\") {\n        text += `${prompt[0].content}\n\n`;\n        prompt = prompt.slice(1);\n    }\n    for (const { role, content } of prompt){\n        switch(role){\n            case \"system\":\n                {\n                    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.InvalidPromptError({\n                        message: \"Unexpected system message in prompt: ${content}\",\n                        prompt\n                    });\n                }\n            case \"user\":\n                {\n                    const userMessage = content.map((part)=>{\n                        switch(part.type){\n                            case \"text\":\n                                {\n                                    return part.text;\n                                }\n                            case \"image\":\n                                {\n                                    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.UnsupportedFunctionalityError({\n                                        functionality: \"images\"\n                                    });\n                                }\n                        }\n                    }).join(\"\");\n                    text += `${user}:\n${userMessage}\n\n`;\n                    break;\n                }\n            case \"assistant\":\n                {\n                    const assistantMessage = content.map((part)=>{\n                        switch(part.type){\n                            case \"text\":\n                                {\n                                    return part.text;\n                                }\n                            case \"tool-call\":\n                                {\n                                    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.UnsupportedFunctionalityError({\n                                        functionality: \"tool-call messages\"\n                                    });\n                                }\n                        }\n                    }).join(\"\");\n                    text += `${assistant}:\n${assistantMessage}\n\n`;\n                    break;\n                }\n            case \"tool\":\n                {\n                    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.UnsupportedFunctionalityError({\n                        functionality: \"tool messages\"\n                    });\n                }\n            default:\n                {\n                    const _exhaustiveCheck = role;\n                    throw new Error(`Unsupported role: ${_exhaustiveCheck}`);\n                }\n        }\n    }\n    text += `${assistant}:\n`;\n    return {\n        prompt: text,\n        stopSequences: [\n            `\n${user}:`\n        ]\n    };\n}\n// src/map-openai-completion-logprobs.ts\nfunction mapOpenAICompletionLogProbs(logprobs) {\n    return logprobs == null ? void 0 : logprobs.tokens.map((token, index)=>({\n            token,\n            logprob: logprobs.token_logprobs[index],\n            topLogprobs: logprobs.top_logprobs ? Object.entries(logprobs.top_logprobs[index]).map(([token2, logprob])=>({\n                    token: token2,\n                    logprob\n                })) : []\n        }));\n}\n// src/openai-completion-language-model.ts\nvar OpenAICompletionLanguageModel = class {\n    constructor(modelId, settings, config){\n        this.specificationVersion = \"v1\";\n        this.defaultObjectGenerationMode = void 0;\n        this.modelId = modelId;\n        this.settings = settings;\n        this.config = config;\n    }\n    get provider() {\n        return this.config.provider;\n    }\n    getArgs({ mode, inputFormat, prompt, maxTokens, temperature, topP, topK, frequencyPenalty, presencePenalty, stopSequences: userStopSequences, responseFormat, seed }) {\n        var _a;\n        const type = mode.type;\n        const warnings = [];\n        if (topK != null) {\n            warnings.push({\n                type: \"unsupported-setting\",\n                setting: \"topK\"\n            });\n        }\n        if (responseFormat != null && responseFormat.type !== \"text\") {\n            warnings.push({\n                type: \"unsupported-setting\",\n                setting: \"responseFormat\",\n                details: \"JSON response format is not supported.\"\n            });\n        }\n        const { prompt: completionPrompt, stopSequences } = convertToOpenAICompletionPrompt({\n            prompt,\n            inputFormat\n        });\n        const stop = [\n            ...stopSequences != null ? stopSequences : [],\n            ...userStopSequences != null ? userStopSequences : []\n        ];\n        const baseArgs = {\n            // model id:\n            model: this.modelId,\n            // model specific settings:\n            echo: this.settings.echo,\n            logit_bias: this.settings.logitBias,\n            logprobs: typeof this.settings.logprobs === \"number\" ? this.settings.logprobs : typeof this.settings.logprobs === \"boolean\" ? this.settings.logprobs ? 0 : void 0 : void 0,\n            suffix: this.settings.suffix,\n            user: this.settings.user,\n            // standardized settings:\n            max_tokens: maxTokens,\n            temperature,\n            top_p: topP,\n            frequency_penalty: frequencyPenalty,\n            presence_penalty: presencePenalty,\n            seed,\n            // prompt:\n            prompt: completionPrompt,\n            // stop sequences:\n            stop: stop.length > 0 ? stop : void 0\n        };\n        switch(type){\n            case \"regular\":\n                {\n                    if ((_a = mode.tools) == null ? void 0 : _a.length) {\n                        throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.UnsupportedFunctionalityError({\n                            functionality: \"tools\"\n                        });\n                    }\n                    if (mode.toolChoice) {\n                        throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.UnsupportedFunctionalityError({\n                            functionality: \"toolChoice\"\n                        });\n                    }\n                    return {\n                        args: baseArgs,\n                        warnings\n                    };\n                }\n            case \"object-json\":\n                {\n                    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.UnsupportedFunctionalityError({\n                        functionality: \"object-json mode\"\n                    });\n                }\n            case \"object-tool\":\n                {\n                    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.UnsupportedFunctionalityError({\n                        functionality: \"object-tool mode\"\n                    });\n                }\n            default:\n                {\n                    const _exhaustiveCheck = type;\n                    throw new Error(`Unsupported type: ${_exhaustiveCheck}`);\n                }\n        }\n    }\n    async doGenerate(options) {\n        const { args, warnings } = this.getArgs(options);\n        const { responseHeaders, value: response, rawValue: rawResponse } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_0__.postJsonToApi)({\n            url: this.config.url({\n                path: \"/completions\",\n                modelId: this.modelId\n            }),\n            headers: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_0__.combineHeaders)(this.config.headers(), options.headers),\n            body: args,\n            failedResponseHandler: openaiFailedResponseHandler,\n            successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_0__.createJsonResponseHandler)(openaiCompletionResponseSchema),\n            abortSignal: options.abortSignal,\n            fetch: this.config.fetch\n        });\n        const { prompt: rawPrompt, ...rawSettings } = args;\n        const choice = response.choices[0];\n        return {\n            text: choice.text,\n            usage: {\n                promptTokens: response.usage.prompt_tokens,\n                completionTokens: response.usage.completion_tokens\n            },\n            finishReason: mapOpenAIFinishReason(choice.finish_reason),\n            logprobs: mapOpenAICompletionLogProbs(choice.logprobs),\n            rawCall: {\n                rawPrompt,\n                rawSettings\n            },\n            rawResponse: {\n                headers: responseHeaders,\n                body: rawResponse\n            },\n            response: getResponseMetadata(response),\n            warnings,\n            request: {\n                body: JSON.stringify(args)\n            }\n        };\n    }\n    async doStream(options) {\n        const { args, warnings } = this.getArgs(options);\n        const body = {\n            ...args,\n            stream: true,\n            // only include stream_options when in strict compatibility mode:\n            stream_options: this.config.compatibility === \"strict\" ? {\n                include_usage: true\n            } : void 0\n        };\n        const { responseHeaders, value: response } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_0__.postJsonToApi)({\n            url: this.config.url({\n                path: \"/completions\",\n                modelId: this.modelId\n            }),\n            headers: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_0__.combineHeaders)(this.config.headers(), options.headers),\n            body,\n            failedResponseHandler: openaiFailedResponseHandler,\n            successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_0__.createEventSourceResponseHandler)(openaiCompletionChunkSchema),\n            abortSignal: options.abortSignal,\n            fetch: this.config.fetch\n        });\n        const { prompt: rawPrompt, ...rawSettings } = args;\n        let finishReason = \"unknown\";\n        let usage = {\n            promptTokens: Number.NaN,\n            completionTokens: Number.NaN\n        };\n        let logprobs;\n        let isFirstChunk = true;\n        return {\n            stream: response.pipeThrough(new TransformStream({\n                transform (chunk, controller) {\n                    if (!chunk.success) {\n                        finishReason = \"error\";\n                        controller.enqueue({\n                            type: \"error\",\n                            error: chunk.error\n                        });\n                        return;\n                    }\n                    const value = chunk.value;\n                    if (\"error\" in value) {\n                        finishReason = \"error\";\n                        controller.enqueue({\n                            type: \"error\",\n                            error: value.error\n                        });\n                        return;\n                    }\n                    if (isFirstChunk) {\n                        isFirstChunk = false;\n                        controller.enqueue({\n                            type: \"response-metadata\",\n                            ...getResponseMetadata(value)\n                        });\n                    }\n                    if (value.usage != null) {\n                        usage = {\n                            promptTokens: value.usage.prompt_tokens,\n                            completionTokens: value.usage.completion_tokens\n                        };\n                    }\n                    const choice = value.choices[0];\n                    if ((choice == null ? void 0 : choice.finish_reason) != null) {\n                        finishReason = mapOpenAIFinishReason(choice.finish_reason);\n                    }\n                    if ((choice == null ? void 0 : choice.text) != null) {\n                        controller.enqueue({\n                            type: \"text-delta\",\n                            textDelta: choice.text\n                        });\n                    }\n                    const mappedLogprobs = mapOpenAICompletionLogProbs(choice == null ? void 0 : choice.logprobs);\n                    if (mappedLogprobs == null ? void 0 : mappedLogprobs.length) {\n                        if (logprobs === void 0) logprobs = [];\n                        logprobs.push(...mappedLogprobs);\n                    }\n                },\n                flush (controller) {\n                    controller.enqueue({\n                        type: \"finish\",\n                        finishReason,\n                        logprobs,\n                        usage\n                    });\n                }\n            })),\n            rawCall: {\n                rawPrompt,\n                rawSettings\n            },\n            rawResponse: {\n                headers: responseHeaders\n            },\n            warnings,\n            request: {\n                body: JSON.stringify(body)\n            }\n        };\n    }\n};\nvar openaiCompletionResponseSchema = zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n    id: zod__WEBPACK_IMPORTED_MODULE_2__.z.string().nullish(),\n    created: zod__WEBPACK_IMPORTED_MODULE_2__.z.number().nullish(),\n    model: zod__WEBPACK_IMPORTED_MODULE_2__.z.string().nullish(),\n    choices: zod__WEBPACK_IMPORTED_MODULE_2__.z.array(zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n        text: zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n        finish_reason: zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n        logprobs: zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n            tokens: zod__WEBPACK_IMPORTED_MODULE_2__.z.array(zod__WEBPACK_IMPORTED_MODULE_2__.z.string()),\n            token_logprobs: zod__WEBPACK_IMPORTED_MODULE_2__.z.array(zod__WEBPACK_IMPORTED_MODULE_2__.z.number()),\n            top_logprobs: zod__WEBPACK_IMPORTED_MODULE_2__.z.array(zod__WEBPACK_IMPORTED_MODULE_2__.z.record(zod__WEBPACK_IMPORTED_MODULE_2__.z.string(), zod__WEBPACK_IMPORTED_MODULE_2__.z.number())).nullable()\n        }).nullish()\n    })),\n    usage: zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n        prompt_tokens: zod__WEBPACK_IMPORTED_MODULE_2__.z.number(),\n        completion_tokens: zod__WEBPACK_IMPORTED_MODULE_2__.z.number()\n    })\n});\nvar openaiCompletionChunkSchema = zod__WEBPACK_IMPORTED_MODULE_2__.z.union([\n    zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n        id: zod__WEBPACK_IMPORTED_MODULE_2__.z.string().nullish(),\n        created: zod__WEBPACK_IMPORTED_MODULE_2__.z.number().nullish(),\n        model: zod__WEBPACK_IMPORTED_MODULE_2__.z.string().nullish(),\n        choices: zod__WEBPACK_IMPORTED_MODULE_2__.z.array(zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n            text: zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n            finish_reason: zod__WEBPACK_IMPORTED_MODULE_2__.z.string().nullish(),\n            index: zod__WEBPACK_IMPORTED_MODULE_2__.z.number(),\n            logprobs: zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n                tokens: zod__WEBPACK_IMPORTED_MODULE_2__.z.array(zod__WEBPACK_IMPORTED_MODULE_2__.z.string()),\n                token_logprobs: zod__WEBPACK_IMPORTED_MODULE_2__.z.array(zod__WEBPACK_IMPORTED_MODULE_2__.z.number()),\n                top_logprobs: zod__WEBPACK_IMPORTED_MODULE_2__.z.array(zod__WEBPACK_IMPORTED_MODULE_2__.z.record(zod__WEBPACK_IMPORTED_MODULE_2__.z.string(), zod__WEBPACK_IMPORTED_MODULE_2__.z.number())).nullable()\n            }).nullish()\n        })),\n        usage: zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n            prompt_tokens: zod__WEBPACK_IMPORTED_MODULE_2__.z.number(),\n            completion_tokens: zod__WEBPACK_IMPORTED_MODULE_2__.z.number()\n        }).nullish()\n    }),\n    openaiErrorDataSchema\n]);\n// src/openai-embedding-model.ts\n\n\n\nvar OpenAIEmbeddingModel = class {\n    constructor(modelId, settings, config){\n        this.specificationVersion = \"v1\";\n        this.modelId = modelId;\n        this.settings = settings;\n        this.config = config;\n    }\n    get provider() {\n        return this.config.provider;\n    }\n    get maxEmbeddingsPerCall() {\n        var _a;\n        return (_a = this.settings.maxEmbeddingsPerCall) != null ? _a : 2048;\n    }\n    get supportsParallelCalls() {\n        var _a;\n        return (_a = this.settings.supportsParallelCalls) != null ? _a : true;\n    }\n    async doEmbed({ values, headers, abortSignal }) {\n        if (values.length > this.maxEmbeddingsPerCall) {\n            throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.TooManyEmbeddingValuesForCallError({\n                provider: this.provider,\n                modelId: this.modelId,\n                maxEmbeddingsPerCall: this.maxEmbeddingsPerCall,\n                values\n            });\n        }\n        const { responseHeaders, value: response } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_0__.postJsonToApi)({\n            url: this.config.url({\n                path: \"/embeddings\",\n                modelId: this.modelId\n            }),\n            headers: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_0__.combineHeaders)(this.config.headers(), headers),\n            body: {\n                model: this.modelId,\n                input: values,\n                encoding_format: \"float\",\n                dimensions: this.settings.dimensions,\n                user: this.settings.user\n            },\n            failedResponseHandler: openaiFailedResponseHandler,\n            successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_0__.createJsonResponseHandler)(openaiTextEmbeddingResponseSchema),\n            abortSignal,\n            fetch: this.config.fetch\n        });\n        return {\n            embeddings: response.data.map((item)=>item.embedding),\n            usage: response.usage ? {\n                tokens: response.usage.prompt_tokens\n            } : void 0,\n            rawResponse: {\n                headers: responseHeaders\n            }\n        };\n    }\n};\nvar openaiTextEmbeddingResponseSchema = zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n    data: zod__WEBPACK_IMPORTED_MODULE_2__.z.array(zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n        embedding: zod__WEBPACK_IMPORTED_MODULE_2__.z.array(zod__WEBPACK_IMPORTED_MODULE_2__.z.number())\n    })),\n    usage: zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n        prompt_tokens: zod__WEBPACK_IMPORTED_MODULE_2__.z.number()\n    }).nullish()\n});\n// src/openai-image-model.ts\n\n\n// src/openai-image-settings.ts\nvar modelMaxImagesPerCall = {\n    \"dall-e-3\": 1,\n    \"dall-e-2\": 10\n};\n// src/openai-image-model.ts\nvar OpenAIImageModel = class {\n    constructor(modelId, settings, config){\n        this.modelId = modelId;\n        this.settings = settings;\n        this.config = config;\n        this.specificationVersion = \"v1\";\n    }\n    get maxImagesPerCall() {\n        var _a, _b;\n        return (_b = (_a = this.settings.maxImagesPerCall) != null ? _a : modelMaxImagesPerCall[this.modelId]) != null ? _b : 1;\n    }\n    get provider() {\n        return this.config.provider;\n    }\n    async doGenerate({ prompt, n, size, aspectRatio, seed, providerOptions, headers, abortSignal }) {\n        var _a, _b, _c, _d;\n        const warnings = [];\n        if (aspectRatio != null) {\n            warnings.push({\n                type: \"unsupported-setting\",\n                setting: \"aspectRatio\",\n                details: \"This model does not support aspect ratio. Use `size` instead.\"\n            });\n        }\n        if (seed != null) {\n            warnings.push({\n                type: \"unsupported-setting\",\n                setting: \"seed\"\n            });\n        }\n        const currentDate = (_c = (_b = (_a = this.config._internal) == null ? void 0 : _a.currentDate) == null ? void 0 : _b.call(_a)) != null ? _c : /* @__PURE__ */ new Date();\n        const { value: response, responseHeaders } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_0__.postJsonToApi)({\n            url: this.config.url({\n                path: \"/images/generations\",\n                modelId: this.modelId\n            }),\n            headers: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_0__.combineHeaders)(this.config.headers(), headers),\n            body: {\n                model: this.modelId,\n                prompt,\n                n,\n                size,\n                ...(_d = providerOptions.openai) != null ? _d : {},\n                response_format: \"b64_json\"\n            },\n            failedResponseHandler: openaiFailedResponseHandler,\n            successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_0__.createJsonResponseHandler)(openaiImageResponseSchema),\n            abortSignal,\n            fetch: this.config.fetch\n        });\n        return {\n            images: response.data.map((item)=>item.b64_json),\n            warnings,\n            response: {\n                timestamp: currentDate,\n                modelId: this.modelId,\n                headers: responseHeaders\n            }\n        };\n    }\n};\nvar openaiImageResponseSchema = zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n    data: zod__WEBPACK_IMPORTED_MODULE_2__.z.array(zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n        b64_json: zod__WEBPACK_IMPORTED_MODULE_2__.z.string()\n    }))\n});\n// src/responses/openai-responses-language-model.ts\n\n\n// src/responses/convert-to-openai-responses-messages.ts\n\n\nfunction convertToOpenAIResponsesMessages({ prompt, systemMessageMode }) {\n    const messages = [];\n    const warnings = [];\n    for (const { role, content } of prompt){\n        switch(role){\n            case \"system\":\n                {\n                    switch(systemMessageMode){\n                        case \"system\":\n                            {\n                                messages.push({\n                                    role: \"system\",\n                                    content\n                                });\n                                break;\n                            }\n                        case \"developer\":\n                            {\n                                messages.push({\n                                    role: \"developer\",\n                                    content\n                                });\n                                break;\n                            }\n                        case \"remove\":\n                            {\n                                warnings.push({\n                                    type: \"other\",\n                                    message: \"system messages are removed for this model\"\n                                });\n                                break;\n                            }\n                        default:\n                            {\n                                const _exhaustiveCheck = systemMessageMode;\n                                throw new Error(`Unsupported system message mode: ${_exhaustiveCheck}`);\n                            }\n                    }\n                    break;\n                }\n            case \"user\":\n                {\n                    messages.push({\n                        role: \"user\",\n                        content: content.map((part, index)=>{\n                            var _a, _b, _c, _d;\n                            switch(part.type){\n                                case \"text\":\n                                    {\n                                        return {\n                                            type: \"input_text\",\n                                            text: part.text\n                                        };\n                                    }\n                                case \"image\":\n                                    {\n                                        return {\n                                            type: \"input_image\",\n                                            image_url: part.image instanceof URL ? part.image.toString() : `data:${(_a = part.mimeType) != null ? _a : \"image/jpeg\"};base64,${(0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_0__.convertUint8ArrayToBase64)(part.image)}`,\n                                            // OpenAI specific extension: image detail\n                                            detail: (_c = (_b = part.providerMetadata) == null ? void 0 : _b.openai) == null ? void 0 : _c.imageDetail\n                                        };\n                                    }\n                                case \"file\":\n                                    {\n                                        if (part.data instanceof URL) {\n                                            throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.UnsupportedFunctionalityError({\n                                                functionality: \"File URLs in user messages\"\n                                            });\n                                        }\n                                        switch(part.mimeType){\n                                            case \"application/pdf\":\n                                                {\n                                                    return {\n                                                        type: \"input_file\",\n                                                        filename: (_d = part.filename) != null ? _d : `part-${index}.pdf`,\n                                                        file_data: `data:application/pdf;base64,${part.data}`\n                                                    };\n                                                }\n                                            default:\n                                                {\n                                                    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.UnsupportedFunctionalityError({\n                                                        functionality: \"Only PDF files are supported in user messages\"\n                                                    });\n                                                }\n                                        }\n                                    }\n                            }\n                        })\n                    });\n                    break;\n                }\n            case \"assistant\":\n                {\n                    for (const part of content){\n                        switch(part.type){\n                            case \"text\":\n                                {\n                                    messages.push({\n                                        role: \"assistant\",\n                                        content: [\n                                            {\n                                                type: \"output_text\",\n                                                text: part.text\n                                            }\n                                        ]\n                                    });\n                                    break;\n                                }\n                            case \"tool-call\":\n                                {\n                                    messages.push({\n                                        type: \"function_call\",\n                                        call_id: part.toolCallId,\n                                        name: part.toolName,\n                                        arguments: JSON.stringify(part.args)\n                                    });\n                                    break;\n                                }\n                        }\n                    }\n                    break;\n                }\n            case \"tool\":\n                {\n                    for (const part of content){\n                        messages.push({\n                            type: \"function_call_output\",\n                            call_id: part.toolCallId,\n                            output: JSON.stringify(part.result)\n                        });\n                    }\n                    break;\n                }\n            default:\n                {\n                    const _exhaustiveCheck = role;\n                    throw new Error(`Unsupported role: ${_exhaustiveCheck}`);\n                }\n        }\n    }\n    return {\n        messages,\n        warnings\n    };\n}\n// src/responses/map-openai-responses-finish-reason.ts\nfunction mapOpenAIResponseFinishReason({ finishReason, hasToolCalls }) {\n    switch(finishReason){\n        case void 0:\n        case null:\n            return hasToolCalls ? \"tool-calls\" : \"stop\";\n        case \"max_output_tokens\":\n            return \"length\";\n        case \"content_filter\":\n            return \"content-filter\";\n        default:\n            return hasToolCalls ? \"tool-calls\" : \"unknown\";\n    }\n}\n// src/responses/openai-responses-prepare-tools.ts\n\nfunction prepareResponsesTools({ mode, strict }) {\n    var _a;\n    const tools = ((_a = mode.tools) == null ? void 0 : _a.length) ? mode.tools : void 0;\n    const toolWarnings = [];\n    if (tools == null) {\n        return {\n            tools: void 0,\n            tool_choice: void 0,\n            toolWarnings\n        };\n    }\n    const toolChoice = mode.toolChoice;\n    const openaiTools2 = [];\n    for (const tool of tools){\n        switch(tool.type){\n            case \"function\":\n                openaiTools2.push({\n                    type: \"function\",\n                    name: tool.name,\n                    description: tool.description,\n                    parameters: tool.parameters,\n                    strict: strict ? true : void 0\n                });\n                break;\n            case \"provider-defined\":\n                switch(tool.id){\n                    case \"openai.web_search_preview\":\n                        openaiTools2.push({\n                            type: \"web_search_preview\",\n                            search_context_size: tool.args.searchContextSize,\n                            user_location: tool.args.userLocation\n                        });\n                        break;\n                    default:\n                        toolWarnings.push({\n                            type: \"unsupported-tool\",\n                            tool\n                        });\n                        break;\n                }\n                break;\n            default:\n                toolWarnings.push({\n                    type: \"unsupported-tool\",\n                    tool\n                });\n                break;\n        }\n    }\n    if (toolChoice == null) {\n        return {\n            tools: openaiTools2,\n            tool_choice: void 0,\n            toolWarnings\n        };\n    }\n    const type = toolChoice.type;\n    switch(type){\n        case \"auto\":\n        case \"none\":\n        case \"required\":\n            return {\n                tools: openaiTools2,\n                tool_choice: type,\n                toolWarnings\n            };\n        case \"tool\":\n            return {\n                tools: openaiTools2,\n                tool_choice: {\n                    type: \"function\",\n                    name: toolChoice.toolName\n                },\n                toolWarnings\n            };\n        default:\n            {\n                const _exhaustiveCheck = type;\n                throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.UnsupportedFunctionalityError({\n                    functionality: `Unsupported tool choice type: ${_exhaustiveCheck}`\n                });\n            }\n    }\n}\n// src/responses/openai-responses-language-model.ts\nvar OpenAIResponsesLanguageModel = class {\n    constructor(modelId, config){\n        this.specificationVersion = \"v1\";\n        this.defaultObjectGenerationMode = \"json\";\n        this.modelId = modelId;\n        this.config = config;\n    }\n    get provider() {\n        return this.config.provider;\n    }\n    getArgs({ mode, maxTokens, temperature, stopSequences, topP, topK, presencePenalty, frequencyPenalty, seed, prompt, providerMetadata, responseFormat }) {\n        var _a, _b, _c;\n        const warnings = [];\n        const modelConfig = getResponsesModelConfig(this.modelId);\n        const type = mode.type;\n        if (topK != null) {\n            warnings.push({\n                type: \"unsupported-setting\",\n                setting: \"topK\"\n            });\n        }\n        if (seed != null) {\n            warnings.push({\n                type: \"unsupported-setting\",\n                setting: \"seed\"\n            });\n        }\n        if (presencePenalty != null) {\n            warnings.push({\n                type: \"unsupported-setting\",\n                setting: \"presencePenalty\"\n            });\n        }\n        if (frequencyPenalty != null) {\n            warnings.push({\n                type: \"unsupported-setting\",\n                setting: \"frequencyPenalty\"\n            });\n        }\n        if (stopSequences != null) {\n            warnings.push({\n                type: \"unsupported-setting\",\n                setting: \"stopSequences\"\n            });\n        }\n        const { messages, warnings: messageWarnings } = convertToOpenAIResponsesMessages({\n            prompt,\n            systemMessageMode: modelConfig.systemMessageMode\n        });\n        warnings.push(...messageWarnings);\n        const openaiOptions = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_0__.parseProviderOptions)({\n            provider: \"openai\",\n            providerOptions: providerMetadata,\n            schema: openaiResponsesProviderOptionsSchema\n        });\n        const isStrict = (_a = openaiOptions == null ? void 0 : openaiOptions.strictSchemas) != null ? _a : true;\n        const baseArgs = {\n            model: this.modelId,\n            input: messages,\n            temperature,\n            top_p: topP,\n            max_output_tokens: maxTokens,\n            ...(responseFormat == null ? void 0 : responseFormat.type) === \"json\" && {\n                text: {\n                    format: responseFormat.schema != null ? {\n                        type: \"json_schema\",\n                        strict: isStrict,\n                        name: (_b = responseFormat.name) != null ? _b : \"response\",\n                        description: responseFormat.description,\n                        schema: responseFormat.schema\n                    } : {\n                        type: \"json_object\"\n                    }\n                }\n            },\n            // provider options:\n            metadata: openaiOptions == null ? void 0 : openaiOptions.metadata,\n            parallel_tool_calls: openaiOptions == null ? void 0 : openaiOptions.parallelToolCalls,\n            previous_response_id: openaiOptions == null ? void 0 : openaiOptions.previousResponseId,\n            store: openaiOptions == null ? void 0 : openaiOptions.store,\n            user: openaiOptions == null ? void 0 : openaiOptions.user,\n            instructions: openaiOptions == null ? void 0 : openaiOptions.instructions,\n            // model-specific settings:\n            ...modelConfig.isReasoningModel && (openaiOptions == null ? void 0 : openaiOptions.reasoningEffort) != null && {\n                reasoning: {\n                    effort: openaiOptions == null ? void 0 : openaiOptions.reasoningEffort\n                }\n            },\n            ...modelConfig.requiredAutoTruncation && {\n                truncation: \"auto\"\n            }\n        };\n        if (modelConfig.isReasoningModel) {\n            if (baseArgs.temperature != null) {\n                baseArgs.temperature = void 0;\n                warnings.push({\n                    type: \"unsupported-setting\",\n                    setting: \"temperature\",\n                    details: \"temperature is not supported for reasoning models\"\n                });\n            }\n            if (baseArgs.top_p != null) {\n                baseArgs.top_p = void 0;\n                warnings.push({\n                    type: \"unsupported-setting\",\n                    setting: \"topP\",\n                    details: \"topP is not supported for reasoning models\"\n                });\n            }\n        }\n        switch(type){\n            case \"regular\":\n                {\n                    const { tools, tool_choice, toolWarnings } = prepareResponsesTools({\n                        mode,\n                        strict: isStrict\n                    });\n                    return {\n                        args: {\n                            ...baseArgs,\n                            tools,\n                            tool_choice\n                        },\n                        warnings: [\n                            ...warnings,\n                            ...toolWarnings\n                        ]\n                    };\n                }\n            case \"object-json\":\n                {\n                    return {\n                        args: {\n                            ...baseArgs,\n                            text: {\n                                format: mode.schema != null ? {\n                                    type: \"json_schema\",\n                                    strict: isStrict,\n                                    name: (_c = mode.name) != null ? _c : \"response\",\n                                    description: mode.description,\n                                    schema: mode.schema\n                                } : {\n                                    type: \"json_object\"\n                                }\n                            }\n                        },\n                        warnings\n                    };\n                }\n            case \"object-tool\":\n                {\n                    return {\n                        args: {\n                            ...baseArgs,\n                            tool_choice: {\n                                type: \"function\",\n                                name: mode.tool.name\n                            },\n                            tools: [\n                                {\n                                    type: \"function\",\n                                    name: mode.tool.name,\n                                    description: mode.tool.description,\n                                    parameters: mode.tool.parameters,\n                                    strict: isStrict\n                                }\n                            ]\n                        },\n                        warnings\n                    };\n                }\n            default:\n                {\n                    const _exhaustiveCheck = type;\n                    throw new Error(`Unsupported type: ${_exhaustiveCheck}`);\n                }\n        }\n    }\n    async doGenerate(options) {\n        var _a, _b, _c, _d, _e;\n        const { args: body, warnings } = this.getArgs(options);\n        const { responseHeaders, value: response, rawValue: rawResponse } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_0__.postJsonToApi)({\n            url: this.config.url({\n                path: \"/responses\",\n                modelId: this.modelId\n            }),\n            headers: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_0__.combineHeaders)(this.config.headers(), options.headers),\n            body,\n            failedResponseHandler: openaiFailedResponseHandler,\n            successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_0__.createJsonResponseHandler)(zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n                id: zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n                created_at: zod__WEBPACK_IMPORTED_MODULE_2__.z.number(),\n                model: zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n                output: zod__WEBPACK_IMPORTED_MODULE_2__.z.array(zod__WEBPACK_IMPORTED_MODULE_2__.z.discriminatedUnion(\"type\", [\n                    zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n                        type: zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(\"message\"),\n                        role: zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(\"assistant\"),\n                        content: zod__WEBPACK_IMPORTED_MODULE_2__.z.array(zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n                            type: zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(\"output_text\"),\n                            text: zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n                            annotations: zod__WEBPACK_IMPORTED_MODULE_2__.z.array(zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n                                type: zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(\"url_citation\"),\n                                start_index: zod__WEBPACK_IMPORTED_MODULE_2__.z.number(),\n                                end_index: zod__WEBPACK_IMPORTED_MODULE_2__.z.number(),\n                                url: zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n                                title: zod__WEBPACK_IMPORTED_MODULE_2__.z.string()\n                            }))\n                        }))\n                    }),\n                    zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n                        type: zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(\"function_call\"),\n                        call_id: zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n                        name: zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n                        arguments: zod__WEBPACK_IMPORTED_MODULE_2__.z.string()\n                    }),\n                    zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n                        type: zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(\"web_search_call\")\n                    }),\n                    zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n                        type: zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(\"computer_call\")\n                    }),\n                    zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n                        type: zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(\"reasoning\")\n                    })\n                ])),\n                incomplete_details: zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n                    reason: zod__WEBPACK_IMPORTED_MODULE_2__.z.string()\n                }).nullable(),\n                usage: usageSchema\n            })),\n            abortSignal: options.abortSignal,\n            fetch: this.config.fetch\n        });\n        const outputTextElements = response.output.filter((output)=>output.type === \"message\").flatMap((output)=>output.content).filter((content)=>content.type === \"output_text\");\n        const toolCalls = response.output.filter((output)=>output.type === \"function_call\").map((output)=>({\n                toolCallType: \"function\",\n                toolCallId: output.call_id,\n                toolName: output.name,\n                args: output.arguments\n            }));\n        return {\n            text: outputTextElements.map((content)=>content.text).join(\"\\n\"),\n            sources: outputTextElements.flatMap((content)=>content.annotations.map((annotation)=>{\n                    var _a2, _b2, _c2;\n                    return {\n                        sourceType: \"url\",\n                        id: (_c2 = (_b2 = (_a2 = this.config).generateId) == null ? void 0 : _b2.call(_a2)) != null ? _c2 : (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_0__.generateId)(),\n                        url: annotation.url,\n                        title: annotation.title\n                    };\n                })),\n            finishReason: mapOpenAIResponseFinishReason({\n                finishReason: (_a = response.incomplete_details) == null ? void 0 : _a.reason,\n                hasToolCalls: toolCalls.length > 0\n            }),\n            toolCalls: toolCalls.length > 0 ? toolCalls : void 0,\n            usage: {\n                promptTokens: response.usage.input_tokens,\n                completionTokens: response.usage.output_tokens\n            },\n            rawCall: {\n                rawPrompt: void 0,\n                rawSettings: {}\n            },\n            rawResponse: {\n                headers: responseHeaders,\n                body: rawResponse\n            },\n            request: {\n                body: JSON.stringify(body)\n            },\n            response: {\n                id: response.id,\n                timestamp: new Date(response.created_at * 1e3),\n                modelId: response.model\n            },\n            providerMetadata: {\n                openai: {\n                    responseId: response.id,\n                    cachedPromptTokens: (_c = (_b = response.usage.input_tokens_details) == null ? void 0 : _b.cached_tokens) != null ? _c : null,\n                    reasoningTokens: (_e = (_d = response.usage.output_tokens_details) == null ? void 0 : _d.reasoning_tokens) != null ? _e : null\n                }\n            },\n            warnings\n        };\n    }\n    async doStream(options) {\n        const { args: body, warnings } = this.getArgs(options);\n        const { responseHeaders, value: response } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_0__.postJsonToApi)({\n            url: this.config.url({\n                path: \"/responses\",\n                modelId: this.modelId\n            }),\n            headers: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_0__.combineHeaders)(this.config.headers(), options.headers),\n            body: {\n                ...body,\n                stream: true\n            },\n            failedResponseHandler: openaiFailedResponseHandler,\n            successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_0__.createEventSourceResponseHandler)(openaiResponsesChunkSchema),\n            abortSignal: options.abortSignal,\n            fetch: this.config.fetch\n        });\n        const self = this;\n        let finishReason = \"unknown\";\n        let promptTokens = NaN;\n        let completionTokens = NaN;\n        let cachedPromptTokens = null;\n        let reasoningTokens = null;\n        let responseId = null;\n        const ongoingToolCalls = {};\n        let hasToolCalls = false;\n        return {\n            stream: response.pipeThrough(new TransformStream({\n                transform (chunk, controller) {\n                    var _a, _b, _c, _d, _e, _f, _g, _h;\n                    if (!chunk.success) {\n                        finishReason = \"error\";\n                        controller.enqueue({\n                            type: \"error\",\n                            error: chunk.error\n                        });\n                        return;\n                    }\n                    const value = chunk.value;\n                    if (isResponseOutputItemAddedChunk(value)) {\n                        if (value.item.type === \"function_call\") {\n                            ongoingToolCalls[value.output_index] = {\n                                toolName: value.item.name,\n                                toolCallId: value.item.call_id\n                            };\n                            controller.enqueue({\n                                type: \"tool-call-delta\",\n                                toolCallType: \"function\",\n                                toolCallId: value.item.call_id,\n                                toolName: value.item.name,\n                                argsTextDelta: value.item.arguments\n                            });\n                        }\n                    } else if (isResponseFunctionCallArgumentsDeltaChunk(value)) {\n                        const toolCall = ongoingToolCalls[value.output_index];\n                        if (toolCall != null) {\n                            controller.enqueue({\n                                type: \"tool-call-delta\",\n                                toolCallType: \"function\",\n                                toolCallId: toolCall.toolCallId,\n                                toolName: toolCall.toolName,\n                                argsTextDelta: value.delta\n                            });\n                        }\n                    } else if (isResponseCreatedChunk(value)) {\n                        responseId = value.response.id;\n                        controller.enqueue({\n                            type: \"response-metadata\",\n                            id: value.response.id,\n                            timestamp: new Date(value.response.created_at * 1e3),\n                            modelId: value.response.model\n                        });\n                    } else if (isTextDeltaChunk(value)) {\n                        controller.enqueue({\n                            type: \"text-delta\",\n                            textDelta: value.delta\n                        });\n                    } else if (isResponseOutputItemDoneChunk(value) && value.item.type === \"function_call\") {\n                        ongoingToolCalls[value.output_index] = void 0;\n                        hasToolCalls = true;\n                        controller.enqueue({\n                            type: \"tool-call\",\n                            toolCallType: \"function\",\n                            toolCallId: value.item.call_id,\n                            toolName: value.item.name,\n                            args: value.item.arguments\n                        });\n                    } else if (isResponseFinishedChunk(value)) {\n                        finishReason = mapOpenAIResponseFinishReason({\n                            finishReason: (_a = value.response.incomplete_details) == null ? void 0 : _a.reason,\n                            hasToolCalls\n                        });\n                        promptTokens = value.response.usage.input_tokens;\n                        completionTokens = value.response.usage.output_tokens;\n                        cachedPromptTokens = (_c = (_b = value.response.usage.input_tokens_details) == null ? void 0 : _b.cached_tokens) != null ? _c : cachedPromptTokens;\n                        reasoningTokens = (_e = (_d = value.response.usage.output_tokens_details) == null ? void 0 : _d.reasoning_tokens) != null ? _e : reasoningTokens;\n                    } else if (isResponseAnnotationAddedChunk(value)) {\n                        controller.enqueue({\n                            type: \"source\",\n                            source: {\n                                sourceType: \"url\",\n                                id: (_h = (_g = (_f = self.config).generateId) == null ? void 0 : _g.call(_f)) != null ? _h : (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_0__.generateId)(),\n                                url: value.annotation.url,\n                                title: value.annotation.title\n                            }\n                        });\n                    }\n                },\n                flush (controller) {\n                    controller.enqueue({\n                        type: \"finish\",\n                        finishReason,\n                        usage: {\n                            promptTokens,\n                            completionTokens\n                        },\n                        ...(cachedPromptTokens != null || reasoningTokens != null) && {\n                            providerMetadata: {\n                                openai: {\n                                    responseId,\n                                    cachedPromptTokens,\n                                    reasoningTokens\n                                }\n                            }\n                        }\n                    });\n                }\n            })),\n            rawCall: {\n                rawPrompt: void 0,\n                rawSettings: {}\n            },\n            rawResponse: {\n                headers: responseHeaders\n            },\n            request: {\n                body: JSON.stringify(body)\n            },\n            warnings\n        };\n    }\n};\nvar usageSchema = zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n    input_tokens: zod__WEBPACK_IMPORTED_MODULE_2__.z.number(),\n    input_tokens_details: zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n        cached_tokens: zod__WEBPACK_IMPORTED_MODULE_2__.z.number().nullish()\n    }).nullish(),\n    output_tokens: zod__WEBPACK_IMPORTED_MODULE_2__.z.number(),\n    output_tokens_details: zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n        reasoning_tokens: zod__WEBPACK_IMPORTED_MODULE_2__.z.number().nullish()\n    }).nullish()\n});\nvar textDeltaChunkSchema = zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n    type: zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(\"response.output_text.delta\"),\n    delta: zod__WEBPACK_IMPORTED_MODULE_2__.z.string()\n});\nvar responseFinishedChunkSchema = zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n    type: zod__WEBPACK_IMPORTED_MODULE_2__.z.enum([\n        \"response.completed\",\n        \"response.incomplete\"\n    ]),\n    response: zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n        incomplete_details: zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n            reason: zod__WEBPACK_IMPORTED_MODULE_2__.z.string()\n        }).nullish(),\n        usage: usageSchema\n    })\n});\nvar responseCreatedChunkSchema = zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n    type: zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(\"response.created\"),\n    response: zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n        id: zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n        created_at: zod__WEBPACK_IMPORTED_MODULE_2__.z.number(),\n        model: zod__WEBPACK_IMPORTED_MODULE_2__.z.string()\n    })\n});\nvar responseOutputItemDoneSchema = zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n    type: zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(\"response.output_item.done\"),\n    output_index: zod__WEBPACK_IMPORTED_MODULE_2__.z.number(),\n    item: zod__WEBPACK_IMPORTED_MODULE_2__.z.discriminatedUnion(\"type\", [\n        zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n            type: zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(\"message\")\n        }),\n        zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n            type: zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(\"function_call\"),\n            id: zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n            call_id: zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n            name: zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n            arguments: zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n            status: zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(\"completed\")\n        })\n    ])\n});\nvar responseFunctionCallArgumentsDeltaSchema = zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n    type: zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(\"response.function_call_arguments.delta\"),\n    item_id: zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n    output_index: zod__WEBPACK_IMPORTED_MODULE_2__.z.number(),\n    delta: zod__WEBPACK_IMPORTED_MODULE_2__.z.string()\n});\nvar responseOutputItemAddedSchema = zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n    type: zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(\"response.output_item.added\"),\n    output_index: zod__WEBPACK_IMPORTED_MODULE_2__.z.number(),\n    item: zod__WEBPACK_IMPORTED_MODULE_2__.z.discriminatedUnion(\"type\", [\n        zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n            type: zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(\"message\")\n        }),\n        zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n            type: zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(\"function_call\"),\n            id: zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n            call_id: zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n            name: zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n            arguments: zod__WEBPACK_IMPORTED_MODULE_2__.z.string()\n        })\n    ])\n});\nvar responseAnnotationAddedSchema = zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n    type: zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(\"response.output_text.annotation.added\"),\n    annotation: zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n        type: zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(\"url_citation\"),\n        url: zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n        title: zod__WEBPACK_IMPORTED_MODULE_2__.z.string()\n    })\n});\nvar openaiResponsesChunkSchema = zod__WEBPACK_IMPORTED_MODULE_2__.z.union([\n    textDeltaChunkSchema,\n    responseFinishedChunkSchema,\n    responseCreatedChunkSchema,\n    responseOutputItemDoneSchema,\n    responseFunctionCallArgumentsDeltaSchema,\n    responseOutputItemAddedSchema,\n    responseAnnotationAddedSchema,\n    zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n        type: zod__WEBPACK_IMPORTED_MODULE_2__.z.string()\n    }).passthrough()\n]);\nfunction isTextDeltaChunk(chunk) {\n    return chunk.type === \"response.output_text.delta\";\n}\nfunction isResponseOutputItemDoneChunk(chunk) {\n    return chunk.type === \"response.output_item.done\";\n}\nfunction isResponseFinishedChunk(chunk) {\n    return chunk.type === \"response.completed\" || chunk.type === \"response.incomplete\";\n}\nfunction isResponseCreatedChunk(chunk) {\n    return chunk.type === \"response.created\";\n}\nfunction isResponseFunctionCallArgumentsDeltaChunk(chunk) {\n    return chunk.type === \"response.function_call_arguments.delta\";\n}\nfunction isResponseOutputItemAddedChunk(chunk) {\n    return chunk.type === \"response.output_item.added\";\n}\nfunction isResponseAnnotationAddedChunk(chunk) {\n    return chunk.type === \"response.output_text.annotation.added\";\n}\nfunction getResponsesModelConfig(modelId) {\n    if (modelId.startsWith(\"o\")) {\n        if (modelId.startsWith(\"o1-mini\") || modelId.startsWith(\"o1-preview\")) {\n            return {\n                isReasoningModel: true,\n                systemMessageMode: \"remove\",\n                requiredAutoTruncation: false\n            };\n        }\n        return {\n            isReasoningModel: true,\n            systemMessageMode: \"developer\",\n            requiredAutoTruncation: false\n        };\n    }\n    return {\n        isReasoningModel: false,\n        systemMessageMode: \"system\",\n        requiredAutoTruncation: false\n    };\n}\nvar openaiResponsesProviderOptionsSchema = zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n    metadata: zod__WEBPACK_IMPORTED_MODULE_2__.z.any().nullish(),\n    parallelToolCalls: zod__WEBPACK_IMPORTED_MODULE_2__.z.boolean().nullish(),\n    previousResponseId: zod__WEBPACK_IMPORTED_MODULE_2__.z.string().nullish(),\n    store: zod__WEBPACK_IMPORTED_MODULE_2__.z.boolean().nullish(),\n    user: zod__WEBPACK_IMPORTED_MODULE_2__.z.string().nullish(),\n    reasoningEffort: zod__WEBPACK_IMPORTED_MODULE_2__.z.string().nullish(),\n    strictSchemas: zod__WEBPACK_IMPORTED_MODULE_2__.z.boolean().nullish(),\n    instructions: zod__WEBPACK_IMPORTED_MODULE_2__.z.string().nullish()\n});\n// src/openai-tools.ts\n\nvar WebSearchPreviewParameters = zod__WEBPACK_IMPORTED_MODULE_2__.z.object({});\nfunction webSearchPreviewTool({ searchContextSize, userLocation } = {}) {\n    return {\n        type: \"provider-defined\",\n        id: \"openai.web_search_preview\",\n        args: {\n            searchContextSize,\n            userLocation\n        },\n        parameters: WebSearchPreviewParameters\n    };\n}\nvar openaiTools = {\n    webSearchPreview: webSearchPreviewTool\n};\n// src/openai-provider.ts\nfunction createOpenAI(options = {}) {\n    var _a, _b, _c;\n    const baseURL = (_a = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_0__.withoutTrailingSlash)(options.baseURL)) != null ? _a : \"https://api.openai.com/v1\";\n    const compatibility = (_b = options.compatibility) != null ? _b : \"compatible\";\n    const providerName = (_c = options.name) != null ? _c : \"openai\";\n    const getHeaders = ()=>({\n            Authorization: `Bearer ${(0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_0__.loadApiKey)({\n                apiKey: options.apiKey,\n                environmentVariableName: \"OPENAI_API_KEY\",\n                description: \"OpenAI\"\n            })}`,\n            \"OpenAI-Organization\": options.organization,\n            \"OpenAI-Project\": options.project,\n            ...options.headers\n        });\n    const createChatModel = (modelId, settings = {})=>new OpenAIChatLanguageModel(modelId, settings, {\n            provider: `${providerName}.chat`,\n            url: ({ path })=>`${baseURL}${path}`,\n            headers: getHeaders,\n            compatibility,\n            fetch: options.fetch\n        });\n    const createCompletionModel = (modelId, settings = {})=>new OpenAICompletionLanguageModel(modelId, settings, {\n            provider: `${providerName}.completion`,\n            url: ({ path })=>`${baseURL}${path}`,\n            headers: getHeaders,\n            compatibility,\n            fetch: options.fetch\n        });\n    const createEmbeddingModel = (modelId, settings = {})=>new OpenAIEmbeddingModel(modelId, settings, {\n            provider: `${providerName}.embedding`,\n            url: ({ path })=>`${baseURL}${path}`,\n            headers: getHeaders,\n            fetch: options.fetch\n        });\n    const createImageModel = (modelId, settings = {})=>new OpenAIImageModel(modelId, settings, {\n            provider: `${providerName}.image`,\n            url: ({ path })=>`${baseURL}${path}`,\n            headers: getHeaders,\n            fetch: options.fetch\n        });\n    const createLanguageModel = (modelId, settings)=>{\n        if (new.target) {\n            throw new Error(\"The OpenAI model function cannot be called with the new keyword.\");\n        }\n        if (modelId === \"gpt-3.5-turbo-instruct\") {\n            return createCompletionModel(modelId, settings);\n        }\n        return createChatModel(modelId, settings);\n    };\n    const createResponsesModel = (modelId)=>{\n        return new OpenAIResponsesLanguageModel(modelId, {\n            provider: `${providerName}.responses`,\n            url: ({ path })=>`${baseURL}${path}`,\n            headers: getHeaders,\n            fetch: options.fetch\n        });\n    };\n    const provider = function(modelId, settings) {\n        return createLanguageModel(modelId, settings);\n    };\n    provider.languageModel = createLanguageModel;\n    provider.chat = createChatModel;\n    provider.completion = createCompletionModel;\n    provider.responses = createResponsesModel;\n    provider.embedding = createEmbeddingModel;\n    provider.textEmbedding = createEmbeddingModel;\n    provider.textEmbeddingModel = createEmbeddingModel;\n    provider.image = createImageModel;\n    provider.imageModel = createImageModel;\n    provider.tools = openaiTools;\n    return provider;\n}\nvar openai = createOpenAI({\n    compatibility: \"strict\"\n});\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ai-sdk/openai/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ai-sdk/provider-utils/dist/index.mjs":
/*!************************************************************!*\
  !*** ./node_modules/@ai-sdk/provider-utils/dist/index.mjs ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   asValidator: () => (/* binding */ asValidator),\n/* harmony export */   combineHeaders: () => (/* binding */ combineHeaders),\n/* harmony export */   convertAsyncIteratorToReadableStream: () => (/* binding */ convertAsyncIteratorToReadableStream),\n/* harmony export */   convertBase64ToUint8Array: () => (/* binding */ convertBase64ToUint8Array),\n/* harmony export */   convertUint8ArrayToBase64: () => (/* binding */ convertUint8ArrayToBase64),\n/* harmony export */   createBinaryResponseHandler: () => (/* binding */ createBinaryResponseHandler),\n/* harmony export */   createEventSourceParserStream: () => (/* binding */ createEventSourceParserStream),\n/* harmony export */   createEventSourceResponseHandler: () => (/* binding */ createEventSourceResponseHandler),\n/* harmony export */   createIdGenerator: () => (/* binding */ createIdGenerator),\n/* harmony export */   createJsonErrorResponseHandler: () => (/* binding */ createJsonErrorResponseHandler),\n/* harmony export */   createJsonResponseHandler: () => (/* binding */ createJsonResponseHandler),\n/* harmony export */   createJsonStreamResponseHandler: () => (/* binding */ createJsonStreamResponseHandler),\n/* harmony export */   createStatusCodeErrorResponseHandler: () => (/* binding */ createStatusCodeErrorResponseHandler),\n/* harmony export */   delay: () => (/* binding */ delay),\n/* harmony export */   extractResponseHeaders: () => (/* binding */ extractResponseHeaders),\n/* harmony export */   generateId: () => (/* binding */ generateId),\n/* harmony export */   getErrorMessage: () => (/* binding */ getErrorMessage),\n/* harmony export */   getFromApi: () => (/* binding */ getFromApi),\n/* harmony export */   isAbortError: () => (/* binding */ isAbortError),\n/* harmony export */   isParsableJson: () => (/* binding */ isParsableJson),\n/* harmony export */   isValidator: () => (/* binding */ isValidator),\n/* harmony export */   loadApiKey: () => (/* binding */ loadApiKey),\n/* harmony export */   loadOptionalSetting: () => (/* binding */ loadOptionalSetting),\n/* harmony export */   loadSetting: () => (/* binding */ loadSetting),\n/* harmony export */   parseJSON: () => (/* binding */ parseJSON),\n/* harmony export */   parseProviderOptions: () => (/* binding */ parseProviderOptions),\n/* harmony export */   postJsonToApi: () => (/* binding */ postJsonToApi),\n/* harmony export */   postToApi: () => (/* binding */ postToApi),\n/* harmony export */   removeUndefinedEntries: () => (/* binding */ removeUndefinedEntries),\n/* harmony export */   resolve: () => (/* binding */ resolve),\n/* harmony export */   safeParseJSON: () => (/* binding */ safeParseJSON),\n/* harmony export */   safeValidateTypes: () => (/* binding */ safeValidateTypes),\n/* harmony export */   validateTypes: () => (/* binding */ validateTypes),\n/* harmony export */   validator: () => (/* binding */ validator),\n/* harmony export */   validatorSymbol: () => (/* binding */ validatorSymbol),\n/* harmony export */   withoutTrailingSlash: () => (/* binding */ withoutTrailingSlash),\n/* harmony export */   zodValidator: () => (/* binding */ zodValidator)\n/* harmony export */ });\n/* harmony import */ var _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ai-sdk/provider */ \"(ssr)/./node_modules/@ai-sdk/provider/dist/index.mjs\");\n/* harmony import */ var nanoid_non_secure__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! nanoid/non-secure */ \"(ssr)/./node_modules/nanoid/non-secure/index.js\");\n/* harmony import */ var secure_json_parse__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! secure-json-parse */ \"(ssr)/./node_modules/secure-json-parse/index.js\");\n// src/combine-headers.ts\nfunction combineHeaders(...headers) {\n    return headers.reduce((combinedHeaders, currentHeaders)=>({\n            ...combinedHeaders,\n            ...currentHeaders != null ? currentHeaders : {}\n        }), {});\n}\n// src/convert-async-iterator-to-readable-stream.ts\nfunction convertAsyncIteratorToReadableStream(iterator) {\n    return new ReadableStream({\n        /**\n     * Called when the consumer wants to pull more data from the stream.\n     *\n     * @param {ReadableStreamDefaultController<T>} controller - The controller to enqueue data into the stream.\n     * @returns {Promise<void>}\n     */ async pull (controller) {\n            try {\n                const { value, done } = await iterator.next();\n                if (done) {\n                    controller.close();\n                } else {\n                    controller.enqueue(value);\n                }\n            } catch (error) {\n                controller.error(error);\n            }\n        },\n        /**\n     * Called when the consumer cancels the stream.\n     */ cancel () {}\n    });\n}\n// src/delay.ts\nasync function delay(delayInMs) {\n    return delayInMs == null ? Promise.resolve() : new Promise((resolve2)=>setTimeout(resolve2, delayInMs));\n}\n// src/event-source-parser-stream.ts\nfunction createEventSourceParserStream() {\n    let buffer = \"\";\n    let event = void 0;\n    let data = [];\n    let lastEventId = void 0;\n    let retry = void 0;\n    function parseLine(line, controller) {\n        if (line === \"\") {\n            dispatchEvent(controller);\n            return;\n        }\n        if (line.startsWith(\":\")) {\n            return;\n        }\n        const colonIndex = line.indexOf(\":\");\n        if (colonIndex === -1) {\n            handleField(line, \"\");\n            return;\n        }\n        const field = line.slice(0, colonIndex);\n        const valueStart = colonIndex + 1;\n        const value = valueStart < line.length && line[valueStart] === \" \" ? line.slice(valueStart + 1) : line.slice(valueStart);\n        handleField(field, value);\n    }\n    function dispatchEvent(controller) {\n        if (data.length > 0) {\n            controller.enqueue({\n                event,\n                data: data.join(\"\\n\"),\n                id: lastEventId,\n                retry\n            });\n            data = [];\n            event = void 0;\n            retry = void 0;\n        }\n    }\n    function handleField(field, value) {\n        switch(field){\n            case \"event\":\n                event = value;\n                break;\n            case \"data\":\n                data.push(value);\n                break;\n            case \"id\":\n                lastEventId = value;\n                break;\n            case \"retry\":\n                const parsedRetry = parseInt(value, 10);\n                if (!isNaN(parsedRetry)) {\n                    retry = parsedRetry;\n                }\n                break;\n        }\n    }\n    return new TransformStream({\n        transform (chunk, controller) {\n            const { lines, incompleteLine } = splitLines(buffer, chunk);\n            buffer = incompleteLine;\n            for(let i = 0; i < lines.length; i++){\n                parseLine(lines[i], controller);\n            }\n        },\n        flush (controller) {\n            parseLine(buffer, controller);\n            dispatchEvent(controller);\n        }\n    });\n}\nfunction splitLines(buffer, chunk) {\n    const lines = [];\n    let currentLine = buffer;\n    for(let i = 0; i < chunk.length;){\n        const char = chunk[i++];\n        if (char === \"\\n\") {\n            lines.push(currentLine);\n            currentLine = \"\";\n        } else if (char === \"\\r\") {\n            lines.push(currentLine);\n            currentLine = \"\";\n            if (chunk[i + 1] === \"\\n\") {\n                i++;\n            }\n        } else {\n            currentLine += char;\n        }\n    }\n    return {\n        lines,\n        incompleteLine: currentLine\n    };\n}\n// src/extract-response-headers.ts\nfunction extractResponseHeaders(response) {\n    const headers = {};\n    response.headers.forEach((value, key)=>{\n        headers[key] = value;\n    });\n    return headers;\n}\n// src/generate-id.ts\n\n\nvar createIdGenerator = ({ prefix, size: defaultSize = 16, alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\", separator = \"-\" } = {})=>{\n    const generator = (0,nanoid_non_secure__WEBPACK_IMPORTED_MODULE_0__.customAlphabet)(alphabet, defaultSize);\n    if (prefix == null) {\n        return generator;\n    }\n    if (alphabet.includes(separator)) {\n        throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.InvalidArgumentError({\n            argument: \"separator\",\n            message: `The separator \"${separator}\" must not be part of the alphabet \"${alphabet}\".`\n        });\n    }\n    return (size)=>`${prefix}${separator}${generator(size)}`;\n};\nvar generateId = createIdGenerator();\n// src/get-error-message.ts\nfunction getErrorMessage(error) {\n    if (error == null) {\n        return \"unknown error\";\n    }\n    if (typeof error === \"string\") {\n        return error;\n    }\n    if (error instanceof Error) {\n        return error.message;\n    }\n    return JSON.stringify(error);\n}\n// src/get-from-api.ts\n\n// src/remove-undefined-entries.ts\nfunction removeUndefinedEntries(record) {\n    return Object.fromEntries(Object.entries(record).filter(([_key, value])=>value != null));\n}\n// src/is-abort-error.ts\nfunction isAbortError(error) {\n    return error instanceof Error && (error.name === \"AbortError\" || error.name === \"TimeoutError\");\n}\n// src/get-from-api.ts\nvar getOriginalFetch = ()=>globalThis.fetch;\nvar getFromApi = async ({ url, headers = {}, successfulResponseHandler, failedResponseHandler, abortSignal, fetch = getOriginalFetch() })=>{\n    try {\n        const response = await fetch(url, {\n            method: \"GET\",\n            headers: removeUndefinedEntries(headers),\n            signal: abortSignal\n        });\n        const responseHeaders = extractResponseHeaders(response);\n        if (!response.ok) {\n            let errorInformation;\n            try {\n                errorInformation = await failedResponseHandler({\n                    response,\n                    url,\n                    requestBodyValues: {}\n                });\n            } catch (error) {\n                if (isAbortError(error) || _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.APICallError.isInstance(error)) {\n                    throw error;\n                }\n                throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.APICallError({\n                    message: \"Failed to process error response\",\n                    cause: error,\n                    statusCode: response.status,\n                    url,\n                    responseHeaders,\n                    requestBodyValues: {}\n                });\n            }\n            throw errorInformation.value;\n        }\n        try {\n            return await successfulResponseHandler({\n                response,\n                url,\n                requestBodyValues: {}\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                if (isAbortError(error) || _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.APICallError.isInstance(error)) {\n                    throw error;\n                }\n            }\n            throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.APICallError({\n                message: \"Failed to process successful response\",\n                cause: error,\n                statusCode: response.status,\n                url,\n                responseHeaders,\n                requestBodyValues: {}\n            });\n        }\n    } catch (error) {\n        if (isAbortError(error)) {\n            throw error;\n        }\n        if (error instanceof TypeError && error.message === \"fetch failed\") {\n            const cause = error.cause;\n            if (cause != null) {\n                throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.APICallError({\n                    message: `Cannot connect to API: ${cause.message}`,\n                    cause,\n                    url,\n                    isRetryable: true,\n                    requestBodyValues: {}\n                });\n            }\n        }\n        throw error;\n    }\n};\n// src/load-api-key.ts\n\nfunction loadApiKey({ apiKey, environmentVariableName, apiKeyParameterName = \"apiKey\", description }) {\n    if (typeof apiKey === \"string\") {\n        return apiKey;\n    }\n    if (apiKey != null) {\n        throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.LoadAPIKeyError({\n            message: `${description} API key must be a string.`\n        });\n    }\n    if (typeof process === \"undefined\") {\n        throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.LoadAPIKeyError({\n            message: `${description} API key is missing. Pass it using the '${apiKeyParameterName}' parameter. Environment variables is not supported in this environment.`\n        });\n    }\n    apiKey = process.env[environmentVariableName];\n    if (apiKey == null) {\n        throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.LoadAPIKeyError({\n            message: `${description} API key is missing. Pass it using the '${apiKeyParameterName}' parameter or the ${environmentVariableName} environment variable.`\n        });\n    }\n    if (typeof apiKey !== \"string\") {\n        throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.LoadAPIKeyError({\n            message: `${description} API key must be a string. The value of the ${environmentVariableName} environment variable is not a string.`\n        });\n    }\n    return apiKey;\n}\n// src/load-optional-setting.ts\nfunction loadOptionalSetting({ settingValue, environmentVariableName }) {\n    if (typeof settingValue === \"string\") {\n        return settingValue;\n    }\n    if (settingValue != null || typeof process === \"undefined\") {\n        return void 0;\n    }\n    settingValue = process.env[environmentVariableName];\n    if (settingValue == null || typeof settingValue !== \"string\") {\n        return void 0;\n    }\n    return settingValue;\n}\n// src/load-setting.ts\n\nfunction loadSetting({ settingValue, environmentVariableName, settingName, description }) {\n    if (typeof settingValue === \"string\") {\n        return settingValue;\n    }\n    if (settingValue != null) {\n        throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.LoadSettingError({\n            message: `${description} setting must be a string.`\n        });\n    }\n    if (typeof process === \"undefined\") {\n        throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.LoadSettingError({\n            message: `${description} setting is missing. Pass it using the '${settingName}' parameter. Environment variables is not supported in this environment.`\n        });\n    }\n    settingValue = process.env[environmentVariableName];\n    if (settingValue == null) {\n        throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.LoadSettingError({\n            message: `${description} setting is missing. Pass it using the '${settingName}' parameter or the ${environmentVariableName} environment variable.`\n        });\n    }\n    if (typeof settingValue !== \"string\") {\n        throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.LoadSettingError({\n            message: `${description} setting must be a string. The value of the ${environmentVariableName} environment variable is not a string.`\n        });\n    }\n    return settingValue;\n}\n// src/parse-json.ts\n\n\n// src/validate-types.ts\n\n// src/validator.ts\nvar validatorSymbol = Symbol.for(\"vercel.ai.validator\");\nfunction validator(validate) {\n    return {\n        [validatorSymbol]: true,\n        validate\n    };\n}\nfunction isValidator(value) {\n    return typeof value === \"object\" && value !== null && validatorSymbol in value && value[validatorSymbol] === true && \"validate\" in value;\n}\nfunction asValidator(value) {\n    return isValidator(value) ? value : zodValidator(value);\n}\nfunction zodValidator(zodSchema) {\n    return validator((value)=>{\n        const result = zodSchema.safeParse(value);\n        return result.success ? {\n            success: true,\n            value: result.data\n        } : {\n            success: false,\n            error: result.error\n        };\n    });\n}\n// src/validate-types.ts\nfunction validateTypes({ value, schema: inputSchema }) {\n    const result = safeValidateTypes({\n        value,\n        schema: inputSchema\n    });\n    if (!result.success) {\n        throw _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.TypeValidationError.wrap({\n            value,\n            cause: result.error\n        });\n    }\n    return result.value;\n}\nfunction safeValidateTypes({ value, schema }) {\n    const validator2 = asValidator(schema);\n    try {\n        if (validator2.validate == null) {\n            return {\n                success: true,\n                value\n            };\n        }\n        const result = validator2.validate(value);\n        if (result.success) {\n            return result;\n        }\n        return {\n            success: false,\n            error: _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.TypeValidationError.wrap({\n                value,\n                cause: result.error\n            })\n        };\n    } catch (error) {\n        return {\n            success: false,\n            error: _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.TypeValidationError.wrap({\n                value,\n                cause: error\n            })\n        };\n    }\n}\n// src/parse-json.ts\nfunction parseJSON({ text, schema }) {\n    try {\n        const value = secure_json_parse__WEBPACK_IMPORTED_MODULE_2__.parse(text);\n        if (schema == null) {\n            return value;\n        }\n        return validateTypes({\n            value,\n            schema\n        });\n    } catch (error) {\n        if (_ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.JSONParseError.isInstance(error) || _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.TypeValidationError.isInstance(error)) {\n            throw error;\n        }\n        throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.JSONParseError({\n            text,\n            cause: error\n        });\n    }\n}\nfunction safeParseJSON({ text, schema }) {\n    try {\n        const value = secure_json_parse__WEBPACK_IMPORTED_MODULE_2__.parse(text);\n        if (schema == null) {\n            return {\n                success: true,\n                value,\n                rawValue: value\n            };\n        }\n        const validationResult = safeValidateTypes({\n            value,\n            schema\n        });\n        return validationResult.success ? {\n            ...validationResult,\n            rawValue: value\n        } : validationResult;\n    } catch (error) {\n        return {\n            success: false,\n            error: _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.JSONParseError.isInstance(error) ? error : new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.JSONParseError({\n                text,\n                cause: error\n            })\n        };\n    }\n}\nfunction isParsableJson(input) {\n    try {\n        secure_json_parse__WEBPACK_IMPORTED_MODULE_2__.parse(input);\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\n// src/parse-provider-options.ts\n\nfunction parseProviderOptions({ provider, providerOptions, schema }) {\n    if ((providerOptions == null ? void 0 : providerOptions[provider]) == null) {\n        return void 0;\n    }\n    const parsedProviderOptions = safeValidateTypes({\n        value: providerOptions[provider],\n        schema\n    });\n    if (!parsedProviderOptions.success) {\n        throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.InvalidArgumentError({\n            argument: \"providerOptions\",\n            message: `invalid ${provider} provider options`,\n            cause: parsedProviderOptions.error\n        });\n    }\n    return parsedProviderOptions.value;\n}\n// src/post-to-api.ts\n\nvar getOriginalFetch2 = ()=>globalThis.fetch;\nvar postJsonToApi = async ({ url, headers, body, failedResponseHandler, successfulResponseHandler, abortSignal, fetch })=>postToApi({\n        url,\n        headers: {\n            \"Content-Type\": \"application/json\",\n            ...headers\n        },\n        body: {\n            content: JSON.stringify(body),\n            values: body\n        },\n        failedResponseHandler,\n        successfulResponseHandler,\n        abortSignal,\n        fetch\n    });\nvar postToApi = async ({ url, headers = {}, body, successfulResponseHandler, failedResponseHandler, abortSignal, fetch = getOriginalFetch2() })=>{\n    try {\n        const response = await fetch(url, {\n            method: \"POST\",\n            headers: removeUndefinedEntries(headers),\n            body: body.content,\n            signal: abortSignal\n        });\n        const responseHeaders = extractResponseHeaders(response);\n        if (!response.ok) {\n            let errorInformation;\n            try {\n                errorInformation = await failedResponseHandler({\n                    response,\n                    url,\n                    requestBodyValues: body.values\n                });\n            } catch (error) {\n                if (isAbortError(error) || _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.APICallError.isInstance(error)) {\n                    throw error;\n                }\n                throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.APICallError({\n                    message: \"Failed to process error response\",\n                    cause: error,\n                    statusCode: response.status,\n                    url,\n                    responseHeaders,\n                    requestBodyValues: body.values\n                });\n            }\n            throw errorInformation.value;\n        }\n        try {\n            return await successfulResponseHandler({\n                response,\n                url,\n                requestBodyValues: body.values\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                if (isAbortError(error) || _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.APICallError.isInstance(error)) {\n                    throw error;\n                }\n            }\n            throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.APICallError({\n                message: \"Failed to process successful response\",\n                cause: error,\n                statusCode: response.status,\n                url,\n                responseHeaders,\n                requestBodyValues: body.values\n            });\n        }\n    } catch (error) {\n        if (isAbortError(error)) {\n            throw error;\n        }\n        if (error instanceof TypeError && error.message === \"fetch failed\") {\n            const cause = error.cause;\n            if (cause != null) {\n                throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.APICallError({\n                    message: `Cannot connect to API: ${cause.message}`,\n                    cause,\n                    url,\n                    requestBodyValues: body.values,\n                    isRetryable: true\n                });\n            }\n        }\n        throw error;\n    }\n};\n// src/resolve.ts\nasync function resolve(value) {\n    if (typeof value === \"function\") {\n        value = value();\n    }\n    return Promise.resolve(value);\n}\n// src/response-handler.ts\n\nvar createJsonErrorResponseHandler = ({ errorSchema, errorToMessage, isRetryable })=>async ({ response, url, requestBodyValues })=>{\n        const responseBody = await response.text();\n        const responseHeaders = extractResponseHeaders(response);\n        if (responseBody.trim() === \"\") {\n            return {\n                responseHeaders,\n                value: new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.APICallError({\n                    message: response.statusText,\n                    url,\n                    requestBodyValues,\n                    statusCode: response.status,\n                    responseHeaders,\n                    responseBody,\n                    isRetryable: isRetryable == null ? void 0 : isRetryable(response)\n                })\n            };\n        }\n        try {\n            const parsedError = parseJSON({\n                text: responseBody,\n                schema: errorSchema\n            });\n            return {\n                responseHeaders,\n                value: new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.APICallError({\n                    message: errorToMessage(parsedError),\n                    url,\n                    requestBodyValues,\n                    statusCode: response.status,\n                    responseHeaders,\n                    responseBody,\n                    data: parsedError,\n                    isRetryable: isRetryable == null ? void 0 : isRetryable(response, parsedError)\n                })\n            };\n        } catch (parseError) {\n            return {\n                responseHeaders,\n                value: new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.APICallError({\n                    message: response.statusText,\n                    url,\n                    requestBodyValues,\n                    statusCode: response.status,\n                    responseHeaders,\n                    responseBody,\n                    isRetryable: isRetryable == null ? void 0 : isRetryable(response)\n                })\n            };\n        }\n    };\nvar createEventSourceResponseHandler = (chunkSchema)=>async ({ response })=>{\n        const responseHeaders = extractResponseHeaders(response);\n        if (response.body == null) {\n            throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.EmptyResponseBodyError({});\n        }\n        return {\n            responseHeaders,\n            value: response.body.pipeThrough(new TextDecoderStream()).pipeThrough(createEventSourceParserStream()).pipeThrough(new TransformStream({\n                transform ({ data }, controller) {\n                    if (data === \"[DONE]\") {\n                        return;\n                    }\n                    controller.enqueue(safeParseJSON({\n                        text: data,\n                        schema: chunkSchema\n                    }));\n                }\n            }))\n        };\n    };\nvar createJsonStreamResponseHandler = (chunkSchema)=>async ({ response })=>{\n        const responseHeaders = extractResponseHeaders(response);\n        if (response.body == null) {\n            throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.EmptyResponseBodyError({});\n        }\n        let buffer = \"\";\n        return {\n            responseHeaders,\n            value: response.body.pipeThrough(new TextDecoderStream()).pipeThrough(new TransformStream({\n                transform (chunkText, controller) {\n                    if (chunkText.endsWith(\"\\n\")) {\n                        controller.enqueue(safeParseJSON({\n                            text: buffer + chunkText,\n                            schema: chunkSchema\n                        }));\n                        buffer = \"\";\n                    } else {\n                        buffer += chunkText;\n                    }\n                }\n            }))\n        };\n    };\nvar createJsonResponseHandler = (responseSchema)=>async ({ response, url, requestBodyValues })=>{\n        const responseBody = await response.text();\n        const parsedResult = safeParseJSON({\n            text: responseBody,\n            schema: responseSchema\n        });\n        const responseHeaders = extractResponseHeaders(response);\n        if (!parsedResult.success) {\n            throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.APICallError({\n                message: \"Invalid JSON response\",\n                cause: parsedResult.error,\n                statusCode: response.status,\n                responseHeaders,\n                responseBody,\n                url,\n                requestBodyValues\n            });\n        }\n        return {\n            responseHeaders,\n            value: parsedResult.value,\n            rawValue: parsedResult.rawValue\n        };\n    };\nvar createBinaryResponseHandler = ()=>async ({ response, url, requestBodyValues })=>{\n        const responseHeaders = extractResponseHeaders(response);\n        if (!response.body) {\n            throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.APICallError({\n                message: \"Response body is empty\",\n                url,\n                requestBodyValues,\n                statusCode: response.status,\n                responseHeaders,\n                responseBody: void 0\n            });\n        }\n        try {\n            const buffer = await response.arrayBuffer();\n            return {\n                responseHeaders,\n                value: new Uint8Array(buffer)\n            };\n        } catch (error) {\n            throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.APICallError({\n                message: \"Failed to read response as array buffer\",\n                url,\n                requestBodyValues,\n                statusCode: response.status,\n                responseHeaders,\n                responseBody: void 0,\n                cause: error\n            });\n        }\n    };\nvar createStatusCodeErrorResponseHandler = ()=>async ({ response, url, requestBodyValues })=>{\n        const responseHeaders = extractResponseHeaders(response);\n        const responseBody = await response.text();\n        return {\n            responseHeaders,\n            value: new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.APICallError({\n                message: response.statusText,\n                url,\n                requestBodyValues,\n                statusCode: response.status,\n                responseHeaders,\n                responseBody\n            })\n        };\n    };\n// src/uint8-utils.ts\nvar { btoa, atob } = globalThis;\nfunction convertBase64ToUint8Array(base64String) {\n    const base64Url = base64String.replace(/-/g, \"+\").replace(/_/g, \"/\");\n    const latin1string = atob(base64Url);\n    return Uint8Array.from(latin1string, (byte)=>byte.codePointAt(0));\n}\nfunction convertUint8ArrayToBase64(array) {\n    let latin1string = \"\";\n    for(let i = 0; i < array.length; i++){\n        latin1string += String.fromCodePoint(array[i]);\n    }\n    return btoa(latin1string);\n}\n// src/without-trailing-slash.ts\nfunction withoutTrailingSlash(url) {\n    return url == null ? void 0 : url.replace(/\\/$/, \"\");\n}\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ai-sdk/provider-utils/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ai-sdk/provider/dist/index.mjs":
/*!******************************************************!*\
  !*** ./node_modules/@ai-sdk/provider/dist/index.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AISDKError: () => (/* binding */ AISDKError),\n/* harmony export */   APICallError: () => (/* binding */ APICallError),\n/* harmony export */   EmptyResponseBodyError: () => (/* binding */ EmptyResponseBodyError),\n/* harmony export */   InvalidArgumentError: () => (/* binding */ InvalidArgumentError),\n/* harmony export */   InvalidPromptError: () => (/* binding */ InvalidPromptError),\n/* harmony export */   InvalidResponseDataError: () => (/* binding */ InvalidResponseDataError),\n/* harmony export */   JSONParseError: () => (/* binding */ JSONParseError),\n/* harmony export */   LoadAPIKeyError: () => (/* binding */ LoadAPIKeyError),\n/* harmony export */   LoadSettingError: () => (/* binding */ LoadSettingError),\n/* harmony export */   NoContentGeneratedError: () => (/* binding */ NoContentGeneratedError),\n/* harmony export */   NoSuchModelError: () => (/* binding */ NoSuchModelError),\n/* harmony export */   TooManyEmbeddingValuesForCallError: () => (/* binding */ TooManyEmbeddingValuesForCallError),\n/* harmony export */   TypeValidationError: () => (/* binding */ TypeValidationError),\n/* harmony export */   UnsupportedFunctionalityError: () => (/* binding */ UnsupportedFunctionalityError),\n/* harmony export */   getErrorMessage: () => (/* binding */ getErrorMessage),\n/* harmony export */   isJSONArray: () => (/* binding */ isJSONArray),\n/* harmony export */   isJSONObject: () => (/* binding */ isJSONObject),\n/* harmony export */   isJSONValue: () => (/* binding */ isJSONValue)\n/* harmony export */ });\n// src/errors/ai-sdk-error.ts\nvar marker = \"vercel.ai.error\";\nvar symbol = Symbol.for(marker);\nvar _a;\nvar _AISDKError = class _AISDKError extends Error {\n    /**\n   * Creates an AI SDK Error.\n   *\n   * @param {Object} params - The parameters for creating the error.\n   * @param {string} params.name - The name of the error.\n   * @param {string} params.message - The error message.\n   * @param {unknown} [params.cause] - The underlying cause of the error.\n   */ constructor({ name: name14, message, cause }){\n        super(message);\n        this[_a] = true;\n        this.name = name14;\n        this.cause = cause;\n    }\n    /**\n   * Checks if the given error is an AI SDK Error.\n   * @param {unknown} error - The error to check.\n   * @returns {boolean} True if the error is an AI SDK Error, false otherwise.\n   */ static isInstance(error) {\n        return _AISDKError.hasMarker(error, marker);\n    }\n    static hasMarker(error, marker15) {\n        const markerSymbol = Symbol.for(marker15);\n        return error != null && typeof error === \"object\" && markerSymbol in error && typeof error[markerSymbol] === \"boolean\" && error[markerSymbol] === true;\n    }\n};\n_a = symbol;\nvar AISDKError = _AISDKError;\n// src/errors/api-call-error.ts\nvar name = \"AI_APICallError\";\nvar marker2 = `vercel.ai.error.${name}`;\nvar symbol2 = Symbol.for(marker2);\nvar _a2;\nvar APICallError = class extends AISDKError {\n    constructor({ message, url, requestBodyValues, statusCode, responseHeaders, responseBody, cause, isRetryable = statusCode != null && (statusCode === 408 || // request timeout\n    statusCode === 409 || // conflict\n    statusCode === 429 || // too many requests\n    statusCode >= 500), // server error\n    data }){\n        super({\n            name,\n            message,\n            cause\n        });\n        this[_a2] = true;\n        this.url = url;\n        this.requestBodyValues = requestBodyValues;\n        this.statusCode = statusCode;\n        this.responseHeaders = responseHeaders;\n        this.responseBody = responseBody;\n        this.isRetryable = isRetryable;\n        this.data = data;\n    }\n    static isInstance(error) {\n        return AISDKError.hasMarker(error, marker2);\n    }\n};\n_a2 = symbol2;\n// src/errors/empty-response-body-error.ts\nvar name2 = \"AI_EmptyResponseBodyError\";\nvar marker3 = `vercel.ai.error.${name2}`;\nvar symbol3 = Symbol.for(marker3);\nvar _a3;\nvar EmptyResponseBodyError = class extends AISDKError {\n    // used in isInstance\n    constructor({ message = \"Empty response body\" } = {}){\n        super({\n            name: name2,\n            message\n        });\n        this[_a3] = true;\n    }\n    static isInstance(error) {\n        return AISDKError.hasMarker(error, marker3);\n    }\n};\n_a3 = symbol3;\n// src/errors/get-error-message.ts\nfunction getErrorMessage(error) {\n    if (error == null) {\n        return \"unknown error\";\n    }\n    if (typeof error === \"string\") {\n        return error;\n    }\n    if (error instanceof Error) {\n        return error.message;\n    }\n    return JSON.stringify(error);\n}\n// src/errors/invalid-argument-error.ts\nvar name3 = \"AI_InvalidArgumentError\";\nvar marker4 = `vercel.ai.error.${name3}`;\nvar symbol4 = Symbol.for(marker4);\nvar _a4;\nvar InvalidArgumentError = class extends AISDKError {\n    constructor({ message, cause, argument }){\n        super({\n            name: name3,\n            message,\n            cause\n        });\n        this[_a4] = true;\n        this.argument = argument;\n    }\n    static isInstance(error) {\n        return AISDKError.hasMarker(error, marker4);\n    }\n};\n_a4 = symbol4;\n// src/errors/invalid-prompt-error.ts\nvar name4 = \"AI_InvalidPromptError\";\nvar marker5 = `vercel.ai.error.${name4}`;\nvar symbol5 = Symbol.for(marker5);\nvar _a5;\nvar InvalidPromptError = class extends AISDKError {\n    constructor({ prompt, message, cause }){\n        super({\n            name: name4,\n            message: `Invalid prompt: ${message}`,\n            cause\n        });\n        this[_a5] = true;\n        this.prompt = prompt;\n    }\n    static isInstance(error) {\n        return AISDKError.hasMarker(error, marker5);\n    }\n};\n_a5 = symbol5;\n// src/errors/invalid-response-data-error.ts\nvar name5 = \"AI_InvalidResponseDataError\";\nvar marker6 = `vercel.ai.error.${name5}`;\nvar symbol6 = Symbol.for(marker6);\nvar _a6;\nvar InvalidResponseDataError = class extends AISDKError {\n    constructor({ data, message = `Invalid response data: ${JSON.stringify(data)}.` }){\n        super({\n            name: name5,\n            message\n        });\n        this[_a6] = true;\n        this.data = data;\n    }\n    static isInstance(error) {\n        return AISDKError.hasMarker(error, marker6);\n    }\n};\n_a6 = symbol6;\n// src/errors/json-parse-error.ts\nvar name6 = \"AI_JSONParseError\";\nvar marker7 = `vercel.ai.error.${name6}`;\nvar symbol7 = Symbol.for(marker7);\nvar _a7;\nvar JSONParseError = class extends AISDKError {\n    constructor({ text, cause }){\n        super({\n            name: name6,\n            message: `JSON parsing failed: Text: ${text}.\nError message: ${getErrorMessage(cause)}`,\n            cause\n        });\n        this[_a7] = true;\n        this.text = text;\n    }\n    static isInstance(error) {\n        return AISDKError.hasMarker(error, marker7);\n    }\n};\n_a7 = symbol7;\n// src/errors/load-api-key-error.ts\nvar name7 = \"AI_LoadAPIKeyError\";\nvar marker8 = `vercel.ai.error.${name7}`;\nvar symbol8 = Symbol.for(marker8);\nvar _a8;\nvar LoadAPIKeyError = class extends AISDKError {\n    // used in isInstance\n    constructor({ message }){\n        super({\n            name: name7,\n            message\n        });\n        this[_a8] = true;\n    }\n    static isInstance(error) {\n        return AISDKError.hasMarker(error, marker8);\n    }\n};\n_a8 = symbol8;\n// src/errors/load-setting-error.ts\nvar name8 = \"AI_LoadSettingError\";\nvar marker9 = `vercel.ai.error.${name8}`;\nvar symbol9 = Symbol.for(marker9);\nvar _a9;\nvar LoadSettingError = class extends AISDKError {\n    // used in isInstance\n    constructor({ message }){\n        super({\n            name: name8,\n            message\n        });\n        this[_a9] = true;\n    }\n    static isInstance(error) {\n        return AISDKError.hasMarker(error, marker9);\n    }\n};\n_a9 = symbol9;\n// src/errors/no-content-generated-error.ts\nvar name9 = \"AI_NoContentGeneratedError\";\nvar marker10 = `vercel.ai.error.${name9}`;\nvar symbol10 = Symbol.for(marker10);\nvar _a10;\nvar NoContentGeneratedError = class extends AISDKError {\n    // used in isInstance\n    constructor({ message = \"No content generated.\" } = {}){\n        super({\n            name: name9,\n            message\n        });\n        this[_a10] = true;\n    }\n    static isInstance(error) {\n        return AISDKError.hasMarker(error, marker10);\n    }\n};\n_a10 = symbol10;\n// src/errors/no-such-model-error.ts\nvar name10 = \"AI_NoSuchModelError\";\nvar marker11 = `vercel.ai.error.${name10}`;\nvar symbol11 = Symbol.for(marker11);\nvar _a11;\nvar NoSuchModelError = class extends AISDKError {\n    constructor({ errorName = name10, modelId, modelType, message = `No such ${modelType}: ${modelId}` }){\n        super({\n            name: errorName,\n            message\n        });\n        this[_a11] = true;\n        this.modelId = modelId;\n        this.modelType = modelType;\n    }\n    static isInstance(error) {\n        return AISDKError.hasMarker(error, marker11);\n    }\n};\n_a11 = symbol11;\n// src/errors/too-many-embedding-values-for-call-error.ts\nvar name11 = \"AI_TooManyEmbeddingValuesForCallError\";\nvar marker12 = `vercel.ai.error.${name11}`;\nvar symbol12 = Symbol.for(marker12);\nvar _a12;\nvar TooManyEmbeddingValuesForCallError = class extends AISDKError {\n    constructor(options){\n        super({\n            name: name11,\n            message: `Too many values for a single embedding call. The ${options.provider} model \"${options.modelId}\" can only embed up to ${options.maxEmbeddingsPerCall} values per call, but ${options.values.length} values were provided.`\n        });\n        this[_a12] = true;\n        this.provider = options.provider;\n        this.modelId = options.modelId;\n        this.maxEmbeddingsPerCall = options.maxEmbeddingsPerCall;\n        this.values = options.values;\n    }\n    static isInstance(error) {\n        return AISDKError.hasMarker(error, marker12);\n    }\n};\n_a12 = symbol12;\n// src/errors/type-validation-error.ts\nvar name12 = \"AI_TypeValidationError\";\nvar marker13 = `vercel.ai.error.${name12}`;\nvar symbol13 = Symbol.for(marker13);\nvar _a13;\nvar _TypeValidationError = class _TypeValidationError extends AISDKError {\n    constructor({ value, cause }){\n        super({\n            name: name12,\n            message: `Type validation failed: Value: ${JSON.stringify(value)}.\nError message: ${getErrorMessage(cause)}`,\n            cause\n        });\n        this[_a13] = true;\n        this.value = value;\n    }\n    static isInstance(error) {\n        return AISDKError.hasMarker(error, marker13);\n    }\n    /**\n   * Wraps an error into a TypeValidationError.\n   * If the cause is already a TypeValidationError with the same value, it returns the cause.\n   * Otherwise, it creates a new TypeValidationError.\n   *\n   * @param {Object} params - The parameters for wrapping the error.\n   * @param {unknown} params.value - The value that failed validation.\n   * @param {unknown} params.cause - The original error or cause of the validation failure.\n   * @returns {TypeValidationError} A TypeValidationError instance.\n   */ static wrap({ value, cause }) {\n        return _TypeValidationError.isInstance(cause) && cause.value === value ? cause : new _TypeValidationError({\n            value,\n            cause\n        });\n    }\n};\n_a13 = symbol13;\nvar TypeValidationError = _TypeValidationError;\n// src/errors/unsupported-functionality-error.ts\nvar name13 = \"AI_UnsupportedFunctionalityError\";\nvar marker14 = `vercel.ai.error.${name13}`;\nvar symbol14 = Symbol.for(marker14);\nvar _a14;\nvar UnsupportedFunctionalityError = class extends AISDKError {\n    constructor({ functionality, message = `'${functionality}' functionality not supported.` }){\n        super({\n            name: name13,\n            message\n        });\n        this[_a14] = true;\n        this.functionality = functionality;\n    }\n    static isInstance(error) {\n        return AISDKError.hasMarker(error, marker14);\n    }\n};\n_a14 = symbol14;\n// src/json-value/is-json.ts\nfunction isJSONValue(value) {\n    if (value === null || typeof value === \"string\" || typeof value === \"number\" || typeof value === \"boolean\") {\n        return true;\n    }\n    if (Array.isArray(value)) {\n        return value.every(isJSONValue);\n    }\n    if (typeof value === \"object\") {\n        return Object.entries(value).every(([key, val])=>typeof key === \"string\" && isJSONValue(val));\n    }\n    return false;\n}\nfunction isJSONArray(value) {\n    return Array.isArray(value) && value.every(isJSONValue);\n}\nfunction isJSONObject(value) {\n    return value != null && typeof value === \"object\" && Object.entries(value).every(([key, val])=>typeof key === \"string\" && isJSONValue(val));\n}\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ai-sdk/provider/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ai-sdk/ui-utils/dist/index.mjs":
/*!******************************************************!*\
  !*** ./node_modules/@ai-sdk/ui-utils/dist/index.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   asSchema: () => (/* binding */ asSchema),\n/* harmony export */   callChatApi: () => (/* binding */ callChatApi),\n/* harmony export */   callCompletionApi: () => (/* binding */ callCompletionApi),\n/* harmony export */   extractMaxToolInvocationStep: () => (/* binding */ extractMaxToolInvocationStep),\n/* harmony export */   fillMessageParts: () => (/* binding */ fillMessageParts),\n/* harmony export */   formatAssistantStreamPart: () => (/* binding */ formatAssistantStreamPart),\n/* harmony export */   formatDataStreamPart: () => (/* binding */ formatDataStreamPart),\n/* harmony export */   generateId: () => (/* reexport safe */ _ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_0__.generateId),\n/* harmony export */   getMessageParts: () => (/* binding */ getMessageParts),\n/* harmony export */   getTextFromDataUrl: () => (/* binding */ getTextFromDataUrl),\n/* harmony export */   isAssistantMessageWithCompletedToolCalls: () => (/* binding */ isAssistantMessageWithCompletedToolCalls),\n/* harmony export */   isDeepEqualData: () => (/* binding */ isDeepEqualData),\n/* harmony export */   jsonSchema: () => (/* binding */ jsonSchema),\n/* harmony export */   parseAssistantStreamPart: () => (/* binding */ parseAssistantStreamPart),\n/* harmony export */   parseDataStreamPart: () => (/* binding */ parseDataStreamPart),\n/* harmony export */   parsePartialJson: () => (/* binding */ parsePartialJson),\n/* harmony export */   prepareAttachmentsForRequest: () => (/* binding */ prepareAttachmentsForRequest),\n/* harmony export */   processAssistantStream: () => (/* binding */ processAssistantStream),\n/* harmony export */   processDataStream: () => (/* binding */ processDataStream),\n/* harmony export */   processTextStream: () => (/* binding */ processTextStream),\n/* harmony export */   shouldResubmitMessages: () => (/* binding */ shouldResubmitMessages),\n/* harmony export */   updateToolCallResult: () => (/* binding */ updateToolCallResult),\n/* harmony export */   zodSchema: () => (/* binding */ zodSchema)\n/* harmony export */ });\n/* harmony import */ var _ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ai-sdk/provider-utils */ \"(ssr)/./node_modules/@ai-sdk/provider-utils/dist/index.mjs\");\n/* harmony import */ var zod_to_json_schema__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! zod-to-json-schema */ \"(ssr)/./node_modules/zod-to-json-schema/dist/esm/index.js\");\n// src/index.ts\n\n// src/assistant-stream-parts.ts\nvar textStreamPart = {\n    code: \"0\",\n    name: \"text\",\n    parse: (value)=>{\n        if (typeof value !== \"string\") {\n            throw new Error('\"text\" parts expect a string value.');\n        }\n        return {\n            type: \"text\",\n            value\n        };\n    }\n};\nvar errorStreamPart = {\n    code: \"3\",\n    name: \"error\",\n    parse: (value)=>{\n        if (typeof value !== \"string\") {\n            throw new Error('\"error\" parts expect a string value.');\n        }\n        return {\n            type: \"error\",\n            value\n        };\n    }\n};\nvar assistantMessageStreamPart = {\n    code: \"4\",\n    name: \"assistant_message\",\n    parse: (value)=>{\n        if (value == null || typeof value !== \"object\" || !(\"id\" in value) || !(\"role\" in value) || !(\"content\" in value) || typeof value.id !== \"string\" || typeof value.role !== \"string\" || value.role !== \"assistant\" || !Array.isArray(value.content) || !value.content.every((item)=>item != null && typeof item === \"object\" && \"type\" in item && item.type === \"text\" && \"text\" in item && item.text != null && typeof item.text === \"object\" && \"value\" in item.text && typeof item.text.value === \"string\")) {\n            throw new Error('\"assistant_message\" parts expect an object with an \"id\", \"role\", and \"content\" property.');\n        }\n        return {\n            type: \"assistant_message\",\n            value\n        };\n    }\n};\nvar assistantControlDataStreamPart = {\n    code: \"5\",\n    name: \"assistant_control_data\",\n    parse: (value)=>{\n        if (value == null || typeof value !== \"object\" || !(\"threadId\" in value) || !(\"messageId\" in value) || typeof value.threadId !== \"string\" || typeof value.messageId !== \"string\") {\n            throw new Error('\"assistant_control_data\" parts expect an object with a \"threadId\" and \"messageId\" property.');\n        }\n        return {\n            type: \"assistant_control_data\",\n            value: {\n                threadId: value.threadId,\n                messageId: value.messageId\n            }\n        };\n    }\n};\nvar dataMessageStreamPart = {\n    code: \"6\",\n    name: \"data_message\",\n    parse: (value)=>{\n        if (value == null || typeof value !== \"object\" || !(\"role\" in value) || !(\"data\" in value) || typeof value.role !== \"string\" || value.role !== \"data\") {\n            throw new Error('\"data_message\" parts expect an object with a \"role\" and \"data\" property.');\n        }\n        return {\n            type: \"data_message\",\n            value\n        };\n    }\n};\nvar assistantStreamParts = [\n    textStreamPart,\n    errorStreamPart,\n    assistantMessageStreamPart,\n    assistantControlDataStreamPart,\n    dataMessageStreamPart\n];\nvar assistantStreamPartsByCode = {\n    [textStreamPart.code]: textStreamPart,\n    [errorStreamPart.code]: errorStreamPart,\n    [assistantMessageStreamPart.code]: assistantMessageStreamPart,\n    [assistantControlDataStreamPart.code]: assistantControlDataStreamPart,\n    [dataMessageStreamPart.code]: dataMessageStreamPart\n};\nvar StreamStringPrefixes = {\n    [textStreamPart.name]: textStreamPart.code,\n    [errorStreamPart.name]: errorStreamPart.code,\n    [assistantMessageStreamPart.name]: assistantMessageStreamPart.code,\n    [assistantControlDataStreamPart.name]: assistantControlDataStreamPart.code,\n    [dataMessageStreamPart.name]: dataMessageStreamPart.code\n};\nvar validCodes = assistantStreamParts.map((part)=>part.code);\nvar parseAssistantStreamPart = (line)=>{\n    const firstSeparatorIndex = line.indexOf(\":\");\n    if (firstSeparatorIndex === -1) {\n        throw new Error(\"Failed to parse stream string. No separator found.\");\n    }\n    const prefix = line.slice(0, firstSeparatorIndex);\n    if (!validCodes.includes(prefix)) {\n        throw new Error(`Failed to parse stream string. Invalid code ${prefix}.`);\n    }\n    const code = prefix;\n    const textValue = line.slice(firstSeparatorIndex + 1);\n    const jsonValue = JSON.parse(textValue);\n    return assistantStreamPartsByCode[code].parse(jsonValue);\n};\nfunction formatAssistantStreamPart(type, value) {\n    const streamPart = assistantStreamParts.find((part)=>part.name === type);\n    if (!streamPart) {\n        throw new Error(`Invalid stream part type: ${type}`);\n    }\n    return `${streamPart.code}:${JSON.stringify(value)}\n`;\n}\n// src/process-chat-response.ts\n\n// src/duplicated/usage.ts\nfunction calculateLanguageModelUsage({ promptTokens, completionTokens }) {\n    return {\n        promptTokens,\n        completionTokens,\n        totalTokens: promptTokens + completionTokens\n    };\n}\n// src/parse-partial-json.ts\n\n// src/fix-json.ts\nfunction fixJson(input) {\n    const stack = [\n        \"ROOT\"\n    ];\n    let lastValidIndex = -1;\n    let literalStart = null;\n    function processValueStart(char, i, swapState) {\n        {\n            switch(char){\n                case '\"':\n                    {\n                        lastValidIndex = i;\n                        stack.pop();\n                        stack.push(swapState);\n                        stack.push(\"INSIDE_STRING\");\n                        break;\n                    }\n                case \"f\":\n                case \"t\":\n                case \"n\":\n                    {\n                        lastValidIndex = i;\n                        literalStart = i;\n                        stack.pop();\n                        stack.push(swapState);\n                        stack.push(\"INSIDE_LITERAL\");\n                        break;\n                    }\n                case \"-\":\n                    {\n                        stack.pop();\n                        stack.push(swapState);\n                        stack.push(\"INSIDE_NUMBER\");\n                        break;\n                    }\n                case \"0\":\n                case \"1\":\n                case \"2\":\n                case \"3\":\n                case \"4\":\n                case \"5\":\n                case \"6\":\n                case \"7\":\n                case \"8\":\n                case \"9\":\n                    {\n                        lastValidIndex = i;\n                        stack.pop();\n                        stack.push(swapState);\n                        stack.push(\"INSIDE_NUMBER\");\n                        break;\n                    }\n                case \"{\":\n                    {\n                        lastValidIndex = i;\n                        stack.pop();\n                        stack.push(swapState);\n                        stack.push(\"INSIDE_OBJECT_START\");\n                        break;\n                    }\n                case \"[\":\n                    {\n                        lastValidIndex = i;\n                        stack.pop();\n                        stack.push(swapState);\n                        stack.push(\"INSIDE_ARRAY_START\");\n                        break;\n                    }\n            }\n        }\n    }\n    function processAfterObjectValue(char, i) {\n        switch(char){\n            case \",\":\n                {\n                    stack.pop();\n                    stack.push(\"INSIDE_OBJECT_AFTER_COMMA\");\n                    break;\n                }\n            case \"}\":\n                {\n                    lastValidIndex = i;\n                    stack.pop();\n                    break;\n                }\n        }\n    }\n    function processAfterArrayValue(char, i) {\n        switch(char){\n            case \",\":\n                {\n                    stack.pop();\n                    stack.push(\"INSIDE_ARRAY_AFTER_COMMA\");\n                    break;\n                }\n            case \"]\":\n                {\n                    lastValidIndex = i;\n                    stack.pop();\n                    break;\n                }\n        }\n    }\n    for(let i = 0; i < input.length; i++){\n        const char = input[i];\n        const currentState = stack[stack.length - 1];\n        switch(currentState){\n            case \"ROOT\":\n                processValueStart(char, i, \"FINISH\");\n                break;\n            case \"INSIDE_OBJECT_START\":\n                {\n                    switch(char){\n                        case '\"':\n                            {\n                                stack.pop();\n                                stack.push(\"INSIDE_OBJECT_KEY\");\n                                break;\n                            }\n                        case \"}\":\n                            {\n                                lastValidIndex = i;\n                                stack.pop();\n                                break;\n                            }\n                    }\n                    break;\n                }\n            case \"INSIDE_OBJECT_AFTER_COMMA\":\n                {\n                    switch(char){\n                        case '\"':\n                            {\n                                stack.pop();\n                                stack.push(\"INSIDE_OBJECT_KEY\");\n                                break;\n                            }\n                    }\n                    break;\n                }\n            case \"INSIDE_OBJECT_KEY\":\n                {\n                    switch(char){\n                        case '\"':\n                            {\n                                stack.pop();\n                                stack.push(\"INSIDE_OBJECT_AFTER_KEY\");\n                                break;\n                            }\n                    }\n                    break;\n                }\n            case \"INSIDE_OBJECT_AFTER_KEY\":\n                {\n                    switch(char){\n                        case \":\":\n                            {\n                                stack.pop();\n                                stack.push(\"INSIDE_OBJECT_BEFORE_VALUE\");\n                                break;\n                            }\n                    }\n                    break;\n                }\n            case \"INSIDE_OBJECT_BEFORE_VALUE\":\n                {\n                    processValueStart(char, i, \"INSIDE_OBJECT_AFTER_VALUE\");\n                    break;\n                }\n            case \"INSIDE_OBJECT_AFTER_VALUE\":\n                {\n                    processAfterObjectValue(char, i);\n                    break;\n                }\n            case \"INSIDE_STRING\":\n                {\n                    switch(char){\n                        case '\"':\n                            {\n                                stack.pop();\n                                lastValidIndex = i;\n                                break;\n                            }\n                        case \"\\\\\":\n                            {\n                                stack.push(\"INSIDE_STRING_ESCAPE\");\n                                break;\n                            }\n                        default:\n                            {\n                                lastValidIndex = i;\n                            }\n                    }\n                    break;\n                }\n            case \"INSIDE_ARRAY_START\":\n                {\n                    switch(char){\n                        case \"]\":\n                            {\n                                lastValidIndex = i;\n                                stack.pop();\n                                break;\n                            }\n                        default:\n                            {\n                                lastValidIndex = i;\n                                processValueStart(char, i, \"INSIDE_ARRAY_AFTER_VALUE\");\n                                break;\n                            }\n                    }\n                    break;\n                }\n            case \"INSIDE_ARRAY_AFTER_VALUE\":\n                {\n                    switch(char){\n                        case \",\":\n                            {\n                                stack.pop();\n                                stack.push(\"INSIDE_ARRAY_AFTER_COMMA\");\n                                break;\n                            }\n                        case \"]\":\n                            {\n                                lastValidIndex = i;\n                                stack.pop();\n                                break;\n                            }\n                        default:\n                            {\n                                lastValidIndex = i;\n                                break;\n                            }\n                    }\n                    break;\n                }\n            case \"INSIDE_ARRAY_AFTER_COMMA\":\n                {\n                    processValueStart(char, i, \"INSIDE_ARRAY_AFTER_VALUE\");\n                    break;\n                }\n            case \"INSIDE_STRING_ESCAPE\":\n                {\n                    stack.pop();\n                    lastValidIndex = i;\n                    break;\n                }\n            case \"INSIDE_NUMBER\":\n                {\n                    switch(char){\n                        case \"0\":\n                        case \"1\":\n                        case \"2\":\n                        case \"3\":\n                        case \"4\":\n                        case \"5\":\n                        case \"6\":\n                        case \"7\":\n                        case \"8\":\n                        case \"9\":\n                            {\n                                lastValidIndex = i;\n                                break;\n                            }\n                        case \"e\":\n                        case \"E\":\n                        case \"-\":\n                        case \".\":\n                            {\n                                break;\n                            }\n                        case \",\":\n                            {\n                                stack.pop();\n                                if (stack[stack.length - 1] === \"INSIDE_ARRAY_AFTER_VALUE\") {\n                                    processAfterArrayValue(char, i);\n                                }\n                                if (stack[stack.length - 1] === \"INSIDE_OBJECT_AFTER_VALUE\") {\n                                    processAfterObjectValue(char, i);\n                                }\n                                break;\n                            }\n                        case \"}\":\n                            {\n                                stack.pop();\n                                if (stack[stack.length - 1] === \"INSIDE_OBJECT_AFTER_VALUE\") {\n                                    processAfterObjectValue(char, i);\n                                }\n                                break;\n                            }\n                        case \"]\":\n                            {\n                                stack.pop();\n                                if (stack[stack.length - 1] === \"INSIDE_ARRAY_AFTER_VALUE\") {\n                                    processAfterArrayValue(char, i);\n                                }\n                                break;\n                            }\n                        default:\n                            {\n                                stack.pop();\n                                break;\n                            }\n                    }\n                    break;\n                }\n            case \"INSIDE_LITERAL\":\n                {\n                    const partialLiteral = input.substring(literalStart, i + 1);\n                    if (!\"false\".startsWith(partialLiteral) && !\"true\".startsWith(partialLiteral) && !\"null\".startsWith(partialLiteral)) {\n                        stack.pop();\n                        if (stack[stack.length - 1] === \"INSIDE_OBJECT_AFTER_VALUE\") {\n                            processAfterObjectValue(char, i);\n                        } else if (stack[stack.length - 1] === \"INSIDE_ARRAY_AFTER_VALUE\") {\n                            processAfterArrayValue(char, i);\n                        }\n                    } else {\n                        lastValidIndex = i;\n                    }\n                    break;\n                }\n        }\n    }\n    let result = input.slice(0, lastValidIndex + 1);\n    for(let i = stack.length - 1; i >= 0; i--){\n        const state = stack[i];\n        switch(state){\n            case \"INSIDE_STRING\":\n                {\n                    result += '\"';\n                    break;\n                }\n            case \"INSIDE_OBJECT_KEY\":\n            case \"INSIDE_OBJECT_AFTER_KEY\":\n            case \"INSIDE_OBJECT_AFTER_COMMA\":\n            case \"INSIDE_OBJECT_START\":\n            case \"INSIDE_OBJECT_BEFORE_VALUE\":\n            case \"INSIDE_OBJECT_AFTER_VALUE\":\n                {\n                    result += \"}\";\n                    break;\n                }\n            case \"INSIDE_ARRAY_START\":\n            case \"INSIDE_ARRAY_AFTER_COMMA\":\n            case \"INSIDE_ARRAY_AFTER_VALUE\":\n                {\n                    result += \"]\";\n                    break;\n                }\n            case \"INSIDE_LITERAL\":\n                {\n                    const partialLiteral = input.substring(literalStart, input.length);\n                    if (\"true\".startsWith(partialLiteral)) {\n                        result += \"true\".slice(partialLiteral.length);\n                    } else if (\"false\".startsWith(partialLiteral)) {\n                        result += \"false\".slice(partialLiteral.length);\n                    } else if (\"null\".startsWith(partialLiteral)) {\n                        result += \"null\".slice(partialLiteral.length);\n                    }\n                }\n        }\n    }\n    return result;\n}\n// src/parse-partial-json.ts\nfunction parsePartialJson(jsonText) {\n    if (jsonText === void 0) {\n        return {\n            value: void 0,\n            state: \"undefined-input\"\n        };\n    }\n    let result = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_0__.safeParseJSON)({\n        text: jsonText\n    });\n    if (result.success) {\n        return {\n            value: result.value,\n            state: \"successful-parse\"\n        };\n    }\n    result = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_0__.safeParseJSON)({\n        text: fixJson(jsonText)\n    });\n    if (result.success) {\n        return {\n            value: result.value,\n            state: \"repaired-parse\"\n        };\n    }\n    return {\n        value: void 0,\n        state: \"failed-parse\"\n    };\n}\n// src/data-stream-parts.ts\nvar textStreamPart2 = {\n    code: \"0\",\n    name: \"text\",\n    parse: (value)=>{\n        if (typeof value !== \"string\") {\n            throw new Error('\"text\" parts expect a string value.');\n        }\n        return {\n            type: \"text\",\n            value\n        };\n    }\n};\nvar dataStreamPart = {\n    code: \"2\",\n    name: \"data\",\n    parse: (value)=>{\n        if (!Array.isArray(value)) {\n            throw new Error('\"data\" parts expect an array value.');\n        }\n        return {\n            type: \"data\",\n            value\n        };\n    }\n};\nvar errorStreamPart2 = {\n    code: \"3\",\n    name: \"error\",\n    parse: (value)=>{\n        if (typeof value !== \"string\") {\n            throw new Error('\"error\" parts expect a string value.');\n        }\n        return {\n            type: \"error\",\n            value\n        };\n    }\n};\nvar messageAnnotationsStreamPart = {\n    code: \"8\",\n    name: \"message_annotations\",\n    parse: (value)=>{\n        if (!Array.isArray(value)) {\n            throw new Error('\"message_annotations\" parts expect an array value.');\n        }\n        return {\n            type: \"message_annotations\",\n            value\n        };\n    }\n};\nvar toolCallStreamPart = {\n    code: \"9\",\n    name: \"tool_call\",\n    parse: (value)=>{\n        if (value == null || typeof value !== \"object\" || !(\"toolCallId\" in value) || typeof value.toolCallId !== \"string\" || !(\"toolName\" in value) || typeof value.toolName !== \"string\" || !(\"args\" in value) || typeof value.args !== \"object\") {\n            throw new Error('\"tool_call\" parts expect an object with a \"toolCallId\", \"toolName\", and \"args\" property.');\n        }\n        return {\n            type: \"tool_call\",\n            value\n        };\n    }\n};\nvar toolResultStreamPart = {\n    code: \"a\",\n    name: \"tool_result\",\n    parse: (value)=>{\n        if (value == null || typeof value !== \"object\" || !(\"toolCallId\" in value) || typeof value.toolCallId !== \"string\" || !(\"result\" in value)) {\n            throw new Error('\"tool_result\" parts expect an object with a \"toolCallId\" and a \"result\" property.');\n        }\n        return {\n            type: \"tool_result\",\n            value\n        };\n    }\n};\nvar toolCallStreamingStartStreamPart = {\n    code: \"b\",\n    name: \"tool_call_streaming_start\",\n    parse: (value)=>{\n        if (value == null || typeof value !== \"object\" || !(\"toolCallId\" in value) || typeof value.toolCallId !== \"string\" || !(\"toolName\" in value) || typeof value.toolName !== \"string\") {\n            throw new Error('\"tool_call_streaming_start\" parts expect an object with a \"toolCallId\" and \"toolName\" property.');\n        }\n        return {\n            type: \"tool_call_streaming_start\",\n            value\n        };\n    }\n};\nvar toolCallDeltaStreamPart = {\n    code: \"c\",\n    name: \"tool_call_delta\",\n    parse: (value)=>{\n        if (value == null || typeof value !== \"object\" || !(\"toolCallId\" in value) || typeof value.toolCallId !== \"string\" || !(\"argsTextDelta\" in value) || typeof value.argsTextDelta !== \"string\") {\n            throw new Error('\"tool_call_delta\" parts expect an object with a \"toolCallId\" and \"argsTextDelta\" property.');\n        }\n        return {\n            type: \"tool_call_delta\",\n            value\n        };\n    }\n};\nvar finishMessageStreamPart = {\n    code: \"d\",\n    name: \"finish_message\",\n    parse: (value)=>{\n        if (value == null || typeof value !== \"object\" || !(\"finishReason\" in value) || typeof value.finishReason !== \"string\") {\n            throw new Error('\"finish_message\" parts expect an object with a \"finishReason\" property.');\n        }\n        const result = {\n            finishReason: value.finishReason\n        };\n        if (\"usage\" in value && value.usage != null && typeof value.usage === \"object\" && \"promptTokens\" in value.usage && \"completionTokens\" in value.usage) {\n            result.usage = {\n                promptTokens: typeof value.usage.promptTokens === \"number\" ? value.usage.promptTokens : Number.NaN,\n                completionTokens: typeof value.usage.completionTokens === \"number\" ? value.usage.completionTokens : Number.NaN\n            };\n        }\n        return {\n            type: \"finish_message\",\n            value: result\n        };\n    }\n};\nvar finishStepStreamPart = {\n    code: \"e\",\n    name: \"finish_step\",\n    parse: (value)=>{\n        if (value == null || typeof value !== \"object\" || !(\"finishReason\" in value) || typeof value.finishReason !== \"string\") {\n            throw new Error('\"finish_step\" parts expect an object with a \"finishReason\" property.');\n        }\n        const result = {\n            finishReason: value.finishReason,\n            isContinued: false\n        };\n        if (\"usage\" in value && value.usage != null && typeof value.usage === \"object\" && \"promptTokens\" in value.usage && \"completionTokens\" in value.usage) {\n            result.usage = {\n                promptTokens: typeof value.usage.promptTokens === \"number\" ? value.usage.promptTokens : Number.NaN,\n                completionTokens: typeof value.usage.completionTokens === \"number\" ? value.usage.completionTokens : Number.NaN\n            };\n        }\n        if (\"isContinued\" in value && typeof value.isContinued === \"boolean\") {\n            result.isContinued = value.isContinued;\n        }\n        return {\n            type: \"finish_step\",\n            value: result\n        };\n    }\n};\nvar startStepStreamPart = {\n    code: \"f\",\n    name: \"start_step\",\n    parse: (value)=>{\n        if (value == null || typeof value !== \"object\" || !(\"messageId\" in value) || typeof value.messageId !== \"string\") {\n            throw new Error('\"start_step\" parts expect an object with an \"id\" property.');\n        }\n        return {\n            type: \"start_step\",\n            value: {\n                messageId: value.messageId\n            }\n        };\n    }\n};\nvar reasoningStreamPart = {\n    code: \"g\",\n    name: \"reasoning\",\n    parse: (value)=>{\n        if (typeof value !== \"string\") {\n            throw new Error('\"reasoning\" parts expect a string value.');\n        }\n        return {\n            type: \"reasoning\",\n            value\n        };\n    }\n};\nvar sourcePart = {\n    code: \"h\",\n    name: \"source\",\n    parse: (value)=>{\n        if (value == null || typeof value !== \"object\") {\n            throw new Error('\"source\" parts expect a Source object.');\n        }\n        return {\n            type: \"source\",\n            value\n        };\n    }\n};\nvar redactedReasoningStreamPart = {\n    code: \"i\",\n    name: \"redacted_reasoning\",\n    parse: (value)=>{\n        if (value == null || typeof value !== \"object\" || !(\"data\" in value) || typeof value.data !== \"string\") {\n            throw new Error('\"redacted_reasoning\" parts expect an object with a \"data\" property.');\n        }\n        return {\n            type: \"redacted_reasoning\",\n            value: {\n                data: value.data\n            }\n        };\n    }\n};\nvar reasoningSignatureStreamPart = {\n    code: \"j\",\n    name: \"reasoning_signature\",\n    parse: (value)=>{\n        if (value == null || typeof value !== \"object\" || !(\"signature\" in value) || typeof value.signature !== \"string\") {\n            throw new Error('\"reasoning_signature\" parts expect an object with a \"signature\" property.');\n        }\n        return {\n            type: \"reasoning_signature\",\n            value: {\n                signature: value.signature\n            }\n        };\n    }\n};\nvar fileStreamPart = {\n    code: \"k\",\n    name: \"file\",\n    parse: (value)=>{\n        if (value == null || typeof value !== \"object\" || !(\"data\" in value) || typeof value.data !== \"string\" || !(\"mimeType\" in value) || typeof value.mimeType !== \"string\") {\n            throw new Error('\"file\" parts expect an object with a \"data\" and \"mimeType\" property.');\n        }\n        return {\n            type: \"file\",\n            value\n        };\n    }\n};\nvar dataStreamParts = [\n    textStreamPart2,\n    dataStreamPart,\n    errorStreamPart2,\n    messageAnnotationsStreamPart,\n    toolCallStreamPart,\n    toolResultStreamPart,\n    toolCallStreamingStartStreamPart,\n    toolCallDeltaStreamPart,\n    finishMessageStreamPart,\n    finishStepStreamPart,\n    startStepStreamPart,\n    reasoningStreamPart,\n    sourcePart,\n    redactedReasoningStreamPart,\n    reasoningSignatureStreamPart,\n    fileStreamPart\n];\nvar dataStreamPartsByCode = Object.fromEntries(dataStreamParts.map((part)=>[\n        part.code,\n        part\n    ]));\nvar DataStreamStringPrefixes = Object.fromEntries(dataStreamParts.map((part)=>[\n        part.name,\n        part.code\n    ]));\nvar validCodes2 = dataStreamParts.map((part)=>part.code);\nvar parseDataStreamPart = (line)=>{\n    const firstSeparatorIndex = line.indexOf(\":\");\n    if (firstSeparatorIndex === -1) {\n        throw new Error(\"Failed to parse stream string. No separator found.\");\n    }\n    const prefix = line.slice(0, firstSeparatorIndex);\n    if (!validCodes2.includes(prefix)) {\n        throw new Error(`Failed to parse stream string. Invalid code ${prefix}.`);\n    }\n    const code = prefix;\n    const textValue = line.slice(firstSeparatorIndex + 1);\n    const jsonValue = JSON.parse(textValue);\n    return dataStreamPartsByCode[code].parse(jsonValue);\n};\nfunction formatDataStreamPart(type, value) {\n    const streamPart = dataStreamParts.find((part)=>part.name === type);\n    if (!streamPart) {\n        throw new Error(`Invalid stream part type: ${type}`);\n    }\n    return `${streamPart.code}:${JSON.stringify(value)}\n`;\n}\n// src/process-data-stream.ts\nvar NEWLINE = \"\\n\".charCodeAt(0);\nfunction concatChunks(chunks, totalLength) {\n    const concatenatedChunks = new Uint8Array(totalLength);\n    let offset = 0;\n    for (const chunk of chunks){\n        concatenatedChunks.set(chunk, offset);\n        offset += chunk.length;\n    }\n    chunks.length = 0;\n    return concatenatedChunks;\n}\nasync function processDataStream({ stream, onTextPart, onReasoningPart, onReasoningSignaturePart, onRedactedReasoningPart, onSourcePart, onFilePart, onDataPart, onErrorPart, onToolCallStreamingStartPart, onToolCallDeltaPart, onToolCallPart, onToolResultPart, onMessageAnnotationsPart, onFinishMessagePart, onFinishStepPart, onStartStepPart }) {\n    const reader = stream.getReader();\n    const decoder = new TextDecoder();\n    const chunks = [];\n    let totalLength = 0;\n    while(true){\n        const { value } = await reader.read();\n        if (value) {\n            chunks.push(value);\n            totalLength += value.length;\n            if (value[value.length - 1] !== NEWLINE) {\n                continue;\n            }\n        }\n        if (chunks.length === 0) {\n            break;\n        }\n        const concatenatedChunks = concatChunks(chunks, totalLength);\n        totalLength = 0;\n        const streamParts = decoder.decode(concatenatedChunks, {\n            stream: true\n        }).split(\"\\n\").filter((line)=>line !== \"\").map(parseDataStreamPart);\n        for (const { type, value: value2 } of streamParts){\n            switch(type){\n                case \"text\":\n                    await (onTextPart == null ? void 0 : onTextPart(value2));\n                    break;\n                case \"reasoning\":\n                    await (onReasoningPart == null ? void 0 : onReasoningPart(value2));\n                    break;\n                case \"reasoning_signature\":\n                    await (onReasoningSignaturePart == null ? void 0 : onReasoningSignaturePart(value2));\n                    break;\n                case \"redacted_reasoning\":\n                    await (onRedactedReasoningPart == null ? void 0 : onRedactedReasoningPart(value2));\n                    break;\n                case \"file\":\n                    await (onFilePart == null ? void 0 : onFilePart(value2));\n                    break;\n                case \"source\":\n                    await (onSourcePart == null ? void 0 : onSourcePart(value2));\n                    break;\n                case \"data\":\n                    await (onDataPart == null ? void 0 : onDataPart(value2));\n                    break;\n                case \"error\":\n                    await (onErrorPart == null ? void 0 : onErrorPart(value2));\n                    break;\n                case \"message_annotations\":\n                    await (onMessageAnnotationsPart == null ? void 0 : onMessageAnnotationsPart(value2));\n                    break;\n                case \"tool_call_streaming_start\":\n                    await (onToolCallStreamingStartPart == null ? void 0 : onToolCallStreamingStartPart(value2));\n                    break;\n                case \"tool_call_delta\":\n                    await (onToolCallDeltaPart == null ? void 0 : onToolCallDeltaPart(value2));\n                    break;\n                case \"tool_call\":\n                    await (onToolCallPart == null ? void 0 : onToolCallPart(value2));\n                    break;\n                case \"tool_result\":\n                    await (onToolResultPart == null ? void 0 : onToolResultPart(value2));\n                    break;\n                case \"finish_message\":\n                    await (onFinishMessagePart == null ? void 0 : onFinishMessagePart(value2));\n                    break;\n                case \"finish_step\":\n                    await (onFinishStepPart == null ? void 0 : onFinishStepPart(value2));\n                    break;\n                case \"start_step\":\n                    await (onStartStepPart == null ? void 0 : onStartStepPart(value2));\n                    break;\n                default:\n                    {\n                        const exhaustiveCheck = type;\n                        throw new Error(`Unknown stream part type: ${exhaustiveCheck}`);\n                    }\n            }\n        }\n    }\n}\n// src/process-chat-response.ts\nasync function processChatResponse({ stream, update, onToolCall, onFinish, generateId: generateId2 = _ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_0__.generateId, getCurrentDate = ()=>/* @__PURE__ */ new Date(), lastMessage }) {\n    var _a, _b;\n    const replaceLastMessage = (lastMessage == null ? void 0 : lastMessage.role) === \"assistant\";\n    let step = replaceLastMessage ? 1 + // find max step in existing tool invocations:\n    ((_b = (_a = lastMessage.toolInvocations) == null ? void 0 : _a.reduce((max, toolInvocation)=>{\n        var _a2;\n        return Math.max(max, (_a2 = toolInvocation.step) != null ? _a2 : 0);\n    }, 0)) != null ? _b : 0) : 0;\n    const message = replaceLastMessage ? structuredClone(lastMessage) : {\n        id: generateId2(),\n        createdAt: getCurrentDate(),\n        role: \"assistant\",\n        content: \"\",\n        parts: []\n    };\n    let currentTextPart = void 0;\n    let currentReasoningPart = void 0;\n    let currentReasoningTextDetail = void 0;\n    function updateToolInvocationPart(toolCallId, invocation) {\n        const part = message.parts.find((part2)=>part2.type === \"tool-invocation\" && part2.toolInvocation.toolCallId === toolCallId);\n        if (part != null) {\n            part.toolInvocation = invocation;\n        } else {\n            message.parts.push({\n                type: \"tool-invocation\",\n                toolInvocation: invocation\n            });\n        }\n    }\n    const data = [];\n    let messageAnnotations = replaceLastMessage ? lastMessage == null ? void 0 : lastMessage.annotations : void 0;\n    const partialToolCalls = {};\n    let usage = {\n        completionTokens: NaN,\n        promptTokens: NaN,\n        totalTokens: NaN\n    };\n    let finishReason = \"unknown\";\n    function execUpdate() {\n        const copiedData = [\n            ...data\n        ];\n        if (messageAnnotations == null ? void 0 : messageAnnotations.length) {\n            message.annotations = messageAnnotations;\n        }\n        const copiedMessage = {\n            // deep copy the message to ensure that deep changes (msg attachments) are updated\n            // with SolidJS. SolidJS uses referential integration of sub-objects to detect changes.\n            ...structuredClone(message),\n            // add a revision id to ensure that the message is updated with SWR. SWR uses a\n            // hashing approach by default to detect changes, but it only works for shallow\n            // changes. This is why we need to add a revision id to ensure that the message\n            // is updated with SWR (without it, the changes get stuck in SWR and are not\n            // forwarded to rendering):\n            revisionId: generateId2()\n        };\n        update({\n            message: copiedMessage,\n            data: copiedData,\n            replaceLastMessage\n        });\n    }\n    await processDataStream({\n        stream,\n        onTextPart (value) {\n            if (currentTextPart == null) {\n                currentTextPart = {\n                    type: \"text\",\n                    text: value\n                };\n                message.parts.push(currentTextPart);\n            } else {\n                currentTextPart.text += value;\n            }\n            message.content += value;\n            execUpdate();\n        },\n        onReasoningPart (value) {\n            var _a2;\n            if (currentReasoningTextDetail == null) {\n                currentReasoningTextDetail = {\n                    type: \"text\",\n                    text: value\n                };\n                if (currentReasoningPart != null) {\n                    currentReasoningPart.details.push(currentReasoningTextDetail);\n                }\n            } else {\n                currentReasoningTextDetail.text += value;\n            }\n            if (currentReasoningPart == null) {\n                currentReasoningPart = {\n                    type: \"reasoning\",\n                    reasoning: value,\n                    details: [\n                        currentReasoningTextDetail\n                    ]\n                };\n                message.parts.push(currentReasoningPart);\n            } else {\n                currentReasoningPart.reasoning += value;\n            }\n            message.reasoning = ((_a2 = message.reasoning) != null ? _a2 : \"\") + value;\n            execUpdate();\n        },\n        onReasoningSignaturePart (value) {\n            if (currentReasoningTextDetail != null) {\n                currentReasoningTextDetail.signature = value.signature;\n            }\n        },\n        onRedactedReasoningPart (value) {\n            if (currentReasoningPart == null) {\n                currentReasoningPart = {\n                    type: \"reasoning\",\n                    reasoning: \"\",\n                    details: []\n                };\n                message.parts.push(currentReasoningPart);\n            }\n            currentReasoningPart.details.push({\n                type: \"redacted\",\n                data: value.data\n            });\n            currentReasoningTextDetail = void 0;\n            execUpdate();\n        },\n        onFilePart (value) {\n            message.parts.push({\n                type: \"file\",\n                mimeType: value.mimeType,\n                data: value.data\n            });\n            execUpdate();\n        },\n        onSourcePart (value) {\n            message.parts.push({\n                type: \"source\",\n                source: value\n            });\n            execUpdate();\n        },\n        onToolCallStreamingStartPart (value) {\n            if (message.toolInvocations == null) {\n                message.toolInvocations = [];\n            }\n            partialToolCalls[value.toolCallId] = {\n                text: \"\",\n                step,\n                toolName: value.toolName,\n                index: message.toolInvocations.length\n            };\n            const invocation = {\n                state: \"partial-call\",\n                step,\n                toolCallId: value.toolCallId,\n                toolName: value.toolName,\n                args: void 0\n            };\n            message.toolInvocations.push(invocation);\n            updateToolInvocationPart(value.toolCallId, invocation);\n            execUpdate();\n        },\n        onToolCallDeltaPart (value) {\n            const partialToolCall = partialToolCalls[value.toolCallId];\n            partialToolCall.text += value.argsTextDelta;\n            const { value: partialArgs } = parsePartialJson(partialToolCall.text);\n            const invocation = {\n                state: \"partial-call\",\n                step: partialToolCall.step,\n                toolCallId: value.toolCallId,\n                toolName: partialToolCall.toolName,\n                args: partialArgs\n            };\n            message.toolInvocations[partialToolCall.index] = invocation;\n            updateToolInvocationPart(value.toolCallId, invocation);\n            execUpdate();\n        },\n        async onToolCallPart (value) {\n            const invocation = {\n                state: \"call\",\n                step,\n                ...value\n            };\n            if (partialToolCalls[value.toolCallId] != null) {\n                message.toolInvocations[partialToolCalls[value.toolCallId].index] = invocation;\n            } else {\n                if (message.toolInvocations == null) {\n                    message.toolInvocations = [];\n                }\n                message.toolInvocations.push(invocation);\n            }\n            updateToolInvocationPart(value.toolCallId, invocation);\n            execUpdate();\n            if (onToolCall) {\n                const result = await onToolCall({\n                    toolCall: value\n                });\n                if (result != null) {\n                    const invocation2 = {\n                        state: \"result\",\n                        step,\n                        ...value,\n                        result\n                    };\n                    message.toolInvocations[message.toolInvocations.length - 1] = invocation2;\n                    updateToolInvocationPart(value.toolCallId, invocation2);\n                    execUpdate();\n                }\n            }\n        },\n        onToolResultPart (value) {\n            const toolInvocations = message.toolInvocations;\n            if (toolInvocations == null) {\n                throw new Error(\"tool_result must be preceded by a tool_call\");\n            }\n            const toolInvocationIndex = toolInvocations.findIndex((invocation2)=>invocation2.toolCallId === value.toolCallId);\n            if (toolInvocationIndex === -1) {\n                throw new Error(\"tool_result must be preceded by a tool_call with the same toolCallId\");\n            }\n            const invocation = {\n                ...toolInvocations[toolInvocationIndex],\n                state: \"result\",\n                ...value\n            };\n            toolInvocations[toolInvocationIndex] = invocation;\n            updateToolInvocationPart(value.toolCallId, invocation);\n            execUpdate();\n        },\n        onDataPart (value) {\n            data.push(...value);\n            execUpdate();\n        },\n        onMessageAnnotationsPart (value) {\n            if (messageAnnotations == null) {\n                messageAnnotations = [\n                    ...value\n                ];\n            } else {\n                messageAnnotations.push(...value);\n            }\n            execUpdate();\n        },\n        onFinishStepPart (value) {\n            step += 1;\n            currentTextPart = value.isContinued ? currentTextPart : void 0;\n            currentReasoningPart = void 0;\n            currentReasoningTextDetail = void 0;\n        },\n        onStartStepPart (value) {\n            if (!replaceLastMessage) {\n                message.id = value.messageId;\n            }\n        },\n        onFinishMessagePart (value) {\n            finishReason = value.finishReason;\n            if (value.usage != null) {\n                usage = calculateLanguageModelUsage(value.usage);\n            }\n        },\n        onErrorPart (error) {\n            throw new Error(error);\n        }\n    });\n    onFinish == null ? void 0 : onFinish({\n        message,\n        finishReason,\n        usage\n    });\n}\n// src/process-chat-text-response.ts\n\n// src/process-text-stream.ts\nasync function processTextStream({ stream, onTextPart }) {\n    const reader = stream.pipeThrough(new TextDecoderStream()).getReader();\n    while(true){\n        const { done, value } = await reader.read();\n        if (done) {\n            break;\n        }\n        await onTextPart(value);\n    }\n}\n// src/process-chat-text-response.ts\nasync function processChatTextResponse({ stream, update, onFinish, getCurrentDate = ()=>/* @__PURE__ */ new Date(), generateId: generateId2 = _ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_0__.generateId }) {\n    const textPart = {\n        type: \"text\",\n        text: \"\"\n    };\n    const resultMessage = {\n        id: generateId2(),\n        createdAt: getCurrentDate(),\n        role: \"assistant\",\n        content: \"\",\n        parts: [\n            textPart\n        ]\n    };\n    await processTextStream({\n        stream,\n        onTextPart: (chunk)=>{\n            resultMessage.content += chunk;\n            textPart.text += chunk;\n            update({\n                message: {\n                    ...resultMessage\n                },\n                data: [],\n                replaceLastMessage: false\n            });\n        }\n    });\n    onFinish == null ? void 0 : onFinish(resultMessage, {\n        usage: {\n            completionTokens: NaN,\n            promptTokens: NaN,\n            totalTokens: NaN\n        },\n        finishReason: \"unknown\"\n    });\n}\n// src/call-chat-api.ts\nvar getOriginalFetch = ()=>fetch;\nasync function callChatApi({ api, body, streamProtocol = \"data\", credentials, headers, abortController, restoreMessagesOnFailure, onResponse, onUpdate, onFinish, onToolCall, generateId: generateId2, fetch: fetch2 = getOriginalFetch(), lastMessage }) {\n    var _a, _b;\n    const response = await fetch2(api, {\n        method: \"POST\",\n        body: JSON.stringify(body),\n        headers: {\n            \"Content-Type\": \"application/json\",\n            ...headers\n        },\n        signal: (_a = abortController == null ? void 0 : abortController()) == null ? void 0 : _a.signal,\n        credentials\n    }).catch((err)=>{\n        restoreMessagesOnFailure();\n        throw err;\n    });\n    if (onResponse) {\n        try {\n            await onResponse(response);\n        } catch (err) {\n            throw err;\n        }\n    }\n    if (!response.ok) {\n        restoreMessagesOnFailure();\n        throw new Error((_b = await response.text()) != null ? _b : \"Failed to fetch the chat response.\");\n    }\n    if (!response.body) {\n        throw new Error(\"The response body is empty.\");\n    }\n    switch(streamProtocol){\n        case \"text\":\n            {\n                await processChatTextResponse({\n                    stream: response.body,\n                    update: onUpdate,\n                    onFinish,\n                    generateId: generateId2\n                });\n                return;\n            }\n        case \"data\":\n            {\n                await processChatResponse({\n                    stream: response.body,\n                    update: onUpdate,\n                    lastMessage,\n                    onToolCall,\n                    onFinish ({ message, finishReason, usage }) {\n                        if (onFinish && message != null) {\n                            onFinish(message, {\n                                usage,\n                                finishReason\n                            });\n                        }\n                    },\n                    generateId: generateId2\n                });\n                return;\n            }\n        default:\n            {\n                const exhaustiveCheck = streamProtocol;\n                throw new Error(`Unknown stream protocol: ${exhaustiveCheck}`);\n            }\n    }\n}\n// src/call-completion-api.ts\nvar getOriginalFetch2 = ()=>fetch;\nasync function callCompletionApi({ api, prompt, credentials, headers, body, streamProtocol = \"data\", setCompletion, setLoading, setError, setAbortController, onResponse, onFinish, onError, onData, fetch: fetch2 = getOriginalFetch2() }) {\n    var _a;\n    try {\n        setLoading(true);\n        setError(void 0);\n        const abortController = new AbortController();\n        setAbortController(abortController);\n        setCompletion(\"\");\n        const response = await fetch2(api, {\n            method: \"POST\",\n            body: JSON.stringify({\n                prompt,\n                ...body\n            }),\n            credentials,\n            headers: {\n                \"Content-Type\": \"application/json\",\n                ...headers\n            },\n            signal: abortController.signal\n        }).catch((err)=>{\n            throw err;\n        });\n        if (onResponse) {\n            try {\n                await onResponse(response);\n            } catch (err) {\n                throw err;\n            }\n        }\n        if (!response.ok) {\n            throw new Error((_a = await response.text()) != null ? _a : \"Failed to fetch the chat response.\");\n        }\n        if (!response.body) {\n            throw new Error(\"The response body is empty.\");\n        }\n        let result = \"\";\n        switch(streamProtocol){\n            case \"text\":\n                {\n                    await processTextStream({\n                        stream: response.body,\n                        onTextPart: (chunk)=>{\n                            result += chunk;\n                            setCompletion(result);\n                        }\n                    });\n                    break;\n                }\n            case \"data\":\n                {\n                    await processDataStream({\n                        stream: response.body,\n                        onTextPart (value) {\n                            result += value;\n                            setCompletion(result);\n                        },\n                        onDataPart (value) {\n                            onData == null ? void 0 : onData(value);\n                        },\n                        onErrorPart (value) {\n                            throw new Error(value);\n                        }\n                    });\n                    break;\n                }\n            default:\n                {\n                    const exhaustiveCheck = streamProtocol;\n                    throw new Error(`Unknown stream protocol: ${exhaustiveCheck}`);\n                }\n        }\n        if (onFinish) {\n            onFinish(prompt, result);\n        }\n        setAbortController(null);\n        return result;\n    } catch (err) {\n        if (err.name === \"AbortError\") {\n            setAbortController(null);\n            return null;\n        }\n        if (err instanceof Error) {\n            if (onError) {\n                onError(err);\n            }\n        }\n        setError(err);\n    } finally{\n        setLoading(false);\n    }\n}\n// src/data-url.ts\nfunction getTextFromDataUrl(dataUrl) {\n    const [header, base64Content] = dataUrl.split(\",\");\n    const mimeType = header.split(\";\")[0].split(\":\")[1];\n    if (mimeType == null || base64Content == null) {\n        throw new Error(\"Invalid data URL format\");\n    }\n    try {\n        return window.atob(base64Content);\n    } catch (error) {\n        throw new Error(`Error decoding data URL`);\n    }\n}\n// src/extract-max-tool-invocation-step.ts\nfunction extractMaxToolInvocationStep(toolInvocations) {\n    return toolInvocations == null ? void 0 : toolInvocations.reduce((max, toolInvocation)=>{\n        var _a;\n        return Math.max(max, (_a = toolInvocation.step) != null ? _a : 0);\n    }, 0);\n}\n// src/get-message-parts.ts\nfunction getMessageParts(message) {\n    var _a;\n    return (_a = message.parts) != null ? _a : [\n        ...message.toolInvocations ? message.toolInvocations.map((toolInvocation)=>({\n                type: \"tool-invocation\",\n                toolInvocation\n            })) : [],\n        ...message.reasoning ? [\n            {\n                type: \"reasoning\",\n                reasoning: message.reasoning,\n                details: [\n                    {\n                        type: \"text\",\n                        text: message.reasoning\n                    }\n                ]\n            }\n        ] : [],\n        ...message.content ? [\n            {\n                type: \"text\",\n                text: message.content\n            }\n        ] : []\n    ];\n}\n// src/fill-message-parts.ts\nfunction fillMessageParts(messages) {\n    return messages.map((message)=>({\n            ...message,\n            parts: getMessageParts(message)\n        }));\n}\n// src/is-deep-equal-data.ts\nfunction isDeepEqualData(obj1, obj2) {\n    if (obj1 === obj2) return true;\n    if (obj1 == null || obj2 == null) return false;\n    if (typeof obj1 !== \"object\" && typeof obj2 !== \"object\") return obj1 === obj2;\n    if (obj1.constructor !== obj2.constructor) return false;\n    if (obj1 instanceof Date && obj2 instanceof Date) {\n        return obj1.getTime() === obj2.getTime();\n    }\n    if (Array.isArray(obj1)) {\n        if (obj1.length !== obj2.length) return false;\n        for(let i = 0; i < obj1.length; i++){\n            if (!isDeepEqualData(obj1[i], obj2[i])) return false;\n        }\n        return true;\n    }\n    const keys1 = Object.keys(obj1);\n    const keys2 = Object.keys(obj2);\n    if (keys1.length !== keys2.length) return false;\n    for (const key of keys1){\n        if (!keys2.includes(key)) return false;\n        if (!isDeepEqualData(obj1[key], obj2[key])) return false;\n    }\n    return true;\n}\n// src/prepare-attachments-for-request.ts\nasync function prepareAttachmentsForRequest(attachmentsFromOptions) {\n    if (!attachmentsFromOptions) {\n        return [];\n    }\n    if (attachmentsFromOptions instanceof FileList) {\n        return Promise.all(Array.from(attachmentsFromOptions).map(async (attachment)=>{\n            const { name, type } = attachment;\n            const dataUrl = await new Promise((resolve, reject)=>{\n                const reader = new FileReader();\n                reader.onload = (readerEvent)=>{\n                    var _a;\n                    resolve((_a = readerEvent.target) == null ? void 0 : _a.result);\n                };\n                reader.onerror = (error)=>reject(error);\n                reader.readAsDataURL(attachment);\n            });\n            return {\n                name,\n                contentType: type,\n                url: dataUrl\n            };\n        }));\n    }\n    if (Array.isArray(attachmentsFromOptions)) {\n        return attachmentsFromOptions;\n    }\n    throw new Error(\"Invalid attachments type\");\n}\n// src/process-assistant-stream.ts\nvar NEWLINE2 = \"\\n\".charCodeAt(0);\nfunction concatChunks2(chunks, totalLength) {\n    const concatenatedChunks = new Uint8Array(totalLength);\n    let offset = 0;\n    for (const chunk of chunks){\n        concatenatedChunks.set(chunk, offset);\n        offset += chunk.length;\n    }\n    chunks.length = 0;\n    return concatenatedChunks;\n}\nasync function processAssistantStream({ stream, onTextPart, onErrorPart, onAssistantMessagePart, onAssistantControlDataPart, onDataMessagePart }) {\n    const reader = stream.getReader();\n    const decoder = new TextDecoder();\n    const chunks = [];\n    let totalLength = 0;\n    while(true){\n        const { value } = await reader.read();\n        if (value) {\n            chunks.push(value);\n            totalLength += value.length;\n            if (value[value.length - 1] !== NEWLINE2) {\n                continue;\n            }\n        }\n        if (chunks.length === 0) {\n            break;\n        }\n        const concatenatedChunks = concatChunks2(chunks, totalLength);\n        totalLength = 0;\n        const streamParts = decoder.decode(concatenatedChunks, {\n            stream: true\n        }).split(\"\\n\").filter((line)=>line !== \"\").map(parseAssistantStreamPart);\n        for (const { type, value: value2 } of streamParts){\n            switch(type){\n                case \"text\":\n                    await (onTextPart == null ? void 0 : onTextPart(value2));\n                    break;\n                case \"error\":\n                    await (onErrorPart == null ? void 0 : onErrorPart(value2));\n                    break;\n                case \"assistant_message\":\n                    await (onAssistantMessagePart == null ? void 0 : onAssistantMessagePart(value2));\n                    break;\n                case \"assistant_control_data\":\n                    await (onAssistantControlDataPart == null ? void 0 : onAssistantControlDataPart(value2));\n                    break;\n                case \"data_message\":\n                    await (onDataMessagePart == null ? void 0 : onDataMessagePart(value2));\n                    break;\n                default:\n                    {\n                        const exhaustiveCheck = type;\n                        throw new Error(`Unknown stream part type: ${exhaustiveCheck}`);\n                    }\n            }\n        }\n    }\n}\n// src/schema.ts\n\n// src/zod-schema.ts\n\nfunction zodSchema(zodSchema2, options) {\n    var _a;\n    const useReferences = (_a = options == null ? void 0 : options.useReferences) != null ? _a : false;\n    return jsonSchema((0,zod_to_json_schema__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(zodSchema2, {\n        $refStrategy: useReferences ? \"root\" : \"none\",\n        target: \"jsonSchema7\"\n    }), {\n        validate: (value)=>{\n            const result = zodSchema2.safeParse(value);\n            return result.success ? {\n                success: true,\n                value: result.data\n            } : {\n                success: false,\n                error: result.error\n            };\n        }\n    });\n}\n// src/schema.ts\nvar schemaSymbol = Symbol.for(\"vercel.ai.schema\");\nfunction jsonSchema(jsonSchema2, { validate } = {}) {\n    return {\n        [schemaSymbol]: true,\n        _type: void 0,\n        // should never be used directly\n        [_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_0__.validatorSymbol]: true,\n        jsonSchema: jsonSchema2,\n        validate\n    };\n}\nfunction isSchema(value) {\n    return typeof value === \"object\" && value !== null && schemaSymbol in value && value[schemaSymbol] === true && \"jsonSchema\" in value && \"validate\" in value;\n}\nfunction asSchema(schema) {\n    return isSchema(schema) ? schema : zodSchema(schema);\n}\n// src/should-resubmit-messages.ts\nfunction shouldResubmitMessages({ originalMaxToolInvocationStep, originalMessageCount, maxSteps, messages }) {\n    var _a;\n    const lastMessage = messages[messages.length - 1];\n    return(// check if the feature is enabled:\n    maxSteps > 1 && // ensure there is a last message:\n    lastMessage != null && // ensure we actually have new steps (to prevent infinite loops in case of errors):\n    (messages.length > originalMessageCount || extractMaxToolInvocationStep(lastMessage.toolInvocations) !== originalMaxToolInvocationStep) && // check that next step is possible:\n    isAssistantMessageWithCompletedToolCalls(lastMessage) && // check that assistant has not answered yet:\n    !isLastToolInvocationFollowedByText(lastMessage) && // limit the number of automatic steps:\n    ((_a = extractMaxToolInvocationStep(lastMessage.toolInvocations)) != null ? _a : 0) < maxSteps);\n}\nfunction isLastToolInvocationFollowedByText(message) {\n    let isLastToolInvocationFollowedByText2 = false;\n    message.parts.forEach((part)=>{\n        if (part.type === \"text\") {\n            isLastToolInvocationFollowedByText2 = true;\n        }\n        if (part.type === \"tool-invocation\") {\n            isLastToolInvocationFollowedByText2 = false;\n        }\n    });\n    return isLastToolInvocationFollowedByText2;\n}\nfunction isAssistantMessageWithCompletedToolCalls(message) {\n    return message.role === \"assistant\" && message.parts.filter((part)=>part.type === \"tool-invocation\").every((part)=>\"result\" in part.toolInvocation);\n}\n// src/update-tool-call-result.ts\nfunction updateToolCallResult({ messages, toolCallId, toolResult: result }) {\n    var _a;\n    const lastMessage = messages[messages.length - 1];\n    const invocationPart = lastMessage.parts.find((part)=>part.type === \"tool-invocation\" && part.toolInvocation.toolCallId === toolCallId);\n    if (invocationPart == null) {\n        return;\n    }\n    const toolResult = {\n        ...invocationPart.toolInvocation,\n        state: \"result\",\n        result\n    };\n    invocationPart.toolInvocation = toolResult;\n    lastMessage.toolInvocations = (_a = lastMessage.toolInvocations) == null ? void 0 : _a.map((toolInvocation)=>toolInvocation.toolCallId === toolCallId ? toolResult : toolInvocation);\n}\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ai-sdk/ui-utils/dist/index.mjs\n");

/***/ })

};
;